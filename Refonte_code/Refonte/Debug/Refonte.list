
Refonte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008dd0  08008dd0  00018dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff8  08008ff8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000010  08009010  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08009010  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143f2  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9c  00000000  00000000  00034475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0e  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bc0  00000000  00000000  00038f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ffd  00000000  00000000  00060ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f540a  00000000  00000000  00076adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fac  00000000  00000000  0016bee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00170e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008db8 	.word	0x08008db8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008db8 	.word	0x08008db8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f000 fdd5 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f87b 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 fa89 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb2:	f000 fa61 	bl	8001378 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eb6:	f000 fa2f 	bl	8001318 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eba:	f000 f903 	bl	80010c4 <MX_TIM1_Init>
  MX_UART5_Init();
 8000ebe:	f000 f9fb 	bl	80012b8 <MX_UART5_Init>
  MX_TIM2_Init();
 8000ec2:	f000 f9ab 	bl	800121c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ec6:	f000 f8bf 	bl	8001048 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);// Timer ticks each 1s
 8000eca:	482f      	ldr	r0, [pc, #188]	; (8000f88 <main+0xe8>)
 8000ecc:	f002 ffa2 	bl	8003e14 <HAL_TIM_Base_Start_IT>

  uart_init(&huart2);
 8000ed0:	482e      	ldr	r0, [pc, #184]	; (8000f8c <main+0xec>)
 8000ed2:	f006 f887 	bl	8006fe4 <uart_init>


  for (int i=0; i < 16; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e008      	b.n	8000eee <main+0x4e>
	  Set_LED(i, 255, 0, 0);
 8000edc:	2300      	movs	r3, #0
 8000ede:	2200      	movs	r2, #0
 8000ee0:	21ff      	movs	r1, #255	; 0xff
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f006 fdea 	bl	8007abc <Set_LED>
  for (int i=0; i < 16; i++){
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	ddf3      	ble.n	8000edc <main+0x3c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  msg_manager(&huart2);
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <main+0xec>)
 8000ef6:	f006 fc6f 	bl	80077d8 <msg_manager>
	  for (int i=0; i < 16; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	e00d      	b.n	8000f1c <main+0x7c>
		  Set_LED(i, red, green, blue);
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <main+0xf0>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <main+0xf4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <main+0xf8>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	68b8      	ldr	r0, [r7, #8]
 8000f12:	f006 fdd3 	bl	8007abc <Set_LED>
	  for (int i=0; i < 16; i++){
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	ddee      	ble.n	8000f00 <main+0x60>
	  }
	  if ((LED_delay) && !(stop)){
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <main+0xfc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d015      	beq.n	8000f56 <main+0xb6>
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <main+0x100>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d111      	bne.n	8000f56 <main+0xb6>
		  for (int i=0; i<45; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	e007      	b.n	8000f48 <main+0xa8>
		  {
			  Set_Brightness(i);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f006 fded 	bl	8007b18 <Set_Brightness>
			  WS2812_Send();
 8000f3e:	f006 fd3b 	bl	80079b8 <WS2812_Send>
		  for (int i=0; i<45; i++)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f4c:	ddf4      	ble.n	8000f38 <main+0x98>
		  }
		  stop = 1;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <main+0x100>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e017      	b.n	8000f86 <main+0xe6>
	  }else if(LED_delay > 1){
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <main+0xfc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	ddca      	ble.n	8000ef4 <main+0x54>
		  for (int i=45; i>=0; i--)
 8000f5e:	232d      	movs	r3, #45	; 0x2d
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	e007      	b.n	8000f74 <main+0xd4>
		  {
			  Set_Brightness(i);
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f006 fdd7 	bl	8007b18 <Set_Brightness>
			  WS2812_Send();
 8000f6a:	f006 fd25 	bl	80079b8 <WS2812_Send>
		  for (int i=45; i>=0; i--)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	daf4      	bge.n	8000f64 <main+0xc4>
		  }
		  LED_delay=0;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <main+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
		  stop = 0;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <main+0x100>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
	  msg_manager(&huart2);
 8000f86:	e7b5      	b.n	8000ef4 <main+0x54>
 8000f88:	20000124 	.word	0x20000124
 8000f8c:	20000240 	.word	0x20000240
 8000f90:	200002d8 	.word	0x200002d8
 8000f94:	200002d9 	.word	0x200002d9
 8000f98:	200002da 	.word	0x200002da
 8000f9c:	200002cc 	.word	0x200002cc
 8000fa0:	200002d0 	.word	0x200002d0

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b096      	sub	sp, #88	; 0x58
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	2244      	movs	r2, #68	; 0x44
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fe34 	bl	8007c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fca:	f001 fb17 	bl	80025fc <HAL_PWREx_ControlVoltageScaling>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fd4:	f000 fa98 	bl	8001508 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ff2:	2348      	movs	r3, #72	; 0x48
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000ffe:	2304      	movs	r3, #4
 8001000:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fb4e 	bl	80026a8 <HAL_RCC_OscConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001012:	f000 fa79 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001016:	230f      	movs	r3, #15
 8001018:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101a:	2303      	movs	r3, #3
 800101c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	2104      	movs	r1, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f001 ff15 	bl	8002e60 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800103c:	f000 fa64 	bl	8001508 <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	3758      	adds	r7, #88	; 0x58
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_SPI1_Init+0x74>)
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <MX_SPI1_Init+0x78>)
 8001050:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_SPI1_Init+0x74>)
 8001054:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001058:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_SPI1_Init+0x74>)
 8001062:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001066:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_SPI1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_SPI1_Init+0x74>)
 8001076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_SPI1_Init+0x74>)
 800107e:	2208      	movs	r2, #8
 8001080:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_SPI1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_SPI1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_SPI1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_SPI1_Init+0x74>)
 8001096:	2207      	movs	r2, #7
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_SPI1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_SPI1_Init+0x74>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_SPI1_Init+0x74>)
 80010a8:	f002 fdba 	bl	8003c20 <HAL_SPI_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010b2:	f000 fa29 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000002c 	.word	0x2000002c
 80010c0:	40013000 	.word	0x40013000

080010c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09a      	sub	sp, #104	; 0x68
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	222c      	movs	r2, #44	; 0x2c
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f006 fd8e 	bl	8007c20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <MX_TIM1_Init+0x150>)
 8001106:	4a44      	ldr	r2, [pc, #272]	; (8001218 <MX_TIM1_Init+0x154>)
 8001108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <MX_TIM1_Init+0x150>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <MX_TIM1_Init+0x150>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <MX_TIM1_Init+0x150>)
 8001118:	2259      	movs	r2, #89	; 0x59
 800111a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <MX_TIM1_Init+0x150>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <MX_TIM1_Init+0x150>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <MX_TIM1_Init+0x150>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800112e:	4839      	ldr	r0, [pc, #228]	; (8001214 <MX_TIM1_Init+0x150>)
 8001130:	f002 fe19 	bl	8003d66 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800113a:	f000 f9e5 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001148:	4619      	mov	r1, r3
 800114a:	4832      	ldr	r0, [pc, #200]	; (8001214 <MX_TIM1_Init+0x150>)
 800114c:	f003 fc62 	bl	8004a14 <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001156:	f000 f9d7 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115a:	482e      	ldr	r0, [pc, #184]	; (8001214 <MX_TIM1_Init+0x150>)
 800115c:	f002 feca 	bl	8003ef4 <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001166:	f000 f9cf 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001176:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800117a:	4619      	mov	r1, r3
 800117c:	4825      	ldr	r0, [pc, #148]	; (8001214 <MX_TIM1_Init+0x150>)
 800117e:	f004 fa45 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001188:	f000 f9be 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <MX_TIM1_Init+0x150>)
 80011b2:	f003 fb1b 	bl	80047ec <HAL_TIM_PWM_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80011bc:	f000 f9a4 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM1_Init+0x150>)
 80011f6:	f004 fa91 	bl	800571c <HAL_TIMEx_ConfigBreakDeadTime>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001200:	f000 f982 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM1_Init+0x150>)
 8001206:	f000 fa7f 	bl	8001708 <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3768      	adds	r7, #104	; 0x68
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000d8 	.word	0x200000d8
 8001218:	40012c00 	.word	0x40012c00

0800121c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_TIM2_Init+0x98>)
 800123c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001240:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_TIM2_Init+0x98>)
 8001244:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_TIM2_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200-1;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_TIM2_Init+0x98>)
 8001252:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_TIM2_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_TIM2_Init+0x98>)
 8001266:	f002 fd7e 	bl	8003d66 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001270:	f000 f94a 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_TIM2_Init+0x98>)
 8001282:	f003 fbc7 	bl	8004a14 <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800128c:	f000 f93c 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM2_Init+0x98>)
 800129e:	f004 f9b5 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012a8:	f000 f92e 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000124 	.word	0x20000124

080012b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_UART5_Init+0x58>)
 80012be:	4a15      	ldr	r2, [pc, #84]	; (8001314 <MX_UART5_Init+0x5c>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_UART5_Init+0x58>)
 80012c4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_UART5_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_UART5_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_UART5_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_UART5_Init+0x58>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_UART5_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_UART5_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_UART5_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_UART5_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_UART5_Init+0x58>)
 80012fc:	f004 faaa 	bl	8005854 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001306:	f000 f8ff 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001b8 	.word	0x200001b8
 8001314:	40005000 	.word	0x40005000

08001318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART2_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <MX_USART2_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART2_UART_Init+0x58>)
 8001324:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_USART2_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x58>)
 800135c:	f004 fa7a 	bl	8005854 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 f8cf 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000240 	.word	0x20000240
 8001374:	40004400 	.word	0x40004400

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_DMA_Init+0x48>)
 8001380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_DMA_Init+0x48>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6493      	str	r3, [r2, #72]	; 0x48
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_DMA_Init+0x48>)
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	200c      	movs	r0, #12
 800139c:	f000 fcb1 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013a0:	200c      	movs	r0, #12
 80013a2:	f000 fcca 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200d      	movs	r0, #13
 80013ac:	f000 fca9 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013b0:	200d      	movs	r0, #13
 80013b2:	f000 fcc2 	bl	8001d3a <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_GPIO_Init+0xa8>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <MX_GPIO_Init+0xa8>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_GPIO_Init+0xa8>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_GPIO_Init+0xa8>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <MX_GPIO_Init+0xa8>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_GPIO_Init+0xa8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_GPIO_Init+0xa8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <MX_GPIO_Init+0xa8>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_GPIO_Init+0xa8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_GPIO_Init+0xa8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <MX_GPIO_Init+0xa8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_GPIO_Init+0xa8>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <MX_GPIO_Init+0xac>)
 8001442:	f001 f8b5 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001446:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_GPIO_Init+0xac>)
 8001460:	f000 fefc 	bl	800225c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400

08001474 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	// Cette fonction sera appelée lorsque des données seront reçues
	if (huart == &huart2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_UART_RxCpltCallback+0x30>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d102      	bne.n	800148a <HAL_UART_RxCpltCallback+0x16>
	{
		// Relancer la réception pour les prochaines données
		uart2_irq_is_captured = true;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_UART_RxCpltCallback+0x34>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
	}

	if (huart == &huart5){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_UART_RxCpltCallback+0x38>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d102      	bne.n	8001498 <HAL_UART_RxCpltCallback+0x24>
		uart5_irq_is_captured = true;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_UART_RxCpltCallback+0x3c>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
	}
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000240 	.word	0x20000240
 80014a8:	200002c8 	.word	0x200002c8
 80014ac:	200001b8 	.word	0x200001b8
 80014b0:	200002c9 	.word	0x200002c9

080014b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d104      	bne.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		LED_delay++;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014ce:	6013      	str	r3, [r2, #0]
	}
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	200002cc 	.word	0x200002cc

080014e0 <HAL_TIM_PWM_PulseFinishedCallback>:
//
//	}
//}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80014e8:	2100      	movs	r1, #0
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80014ec:	f002 ff84 	bl	80043f8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000d8 	.word	0x200000d8
 8001504:	200006f4 	.word	0x200006f4

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_MspInit+0x44>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_MspInit+0x44>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6613      	str	r3, [r2, #96]	; 0x60
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_MspInit+0x44>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6593      	str	r3, [r2, #88]	; 0x58
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2b      	ldr	r2, [pc, #172]	; (8001628 <HAL_SPI_MspInit+0xcc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d150      	bne.n	8001620 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_SPI_MspInit+0xd0>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <HAL_SPI_MspInit+0xd0>)
 8001584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001588:	6613      	str	r3, [r2, #96]	; 0x60
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_SPI_MspInit+0xd0>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_SPI_MspInit+0xd0>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <HAL_SPI_MspInit+0xd0>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_SPI_MspInit+0xd0>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin;
 80015ae:	2328      	movs	r3, #40	; 0x28
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015be:	2305      	movs	r3, #5
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <HAL_SPI_MspInit+0xd4>)
 80015ca:	f000 fe47 	bl	800225c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_SPI_MspInit+0xdc>)
 80015d2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015dc:	2210      	movs	r2, #16
 80015de:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 8001606:	f000 fbb3 	bl	8001d70 <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8001610:	f7ff ff7a 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_SPI_MspInit+0xd8>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40013000 	.word	0x40013000
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400
 8001634:	20000090 	.word	0x20000090
 8001638:	40020030 	.word	0x40020030

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <HAL_TIM_Base_MspInit+0xbc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d137      	bne.n	80016be <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_TIM_Base_MspInit+0xc0>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_TIM_Base_MspInit+0xc0>)
 8001654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_TIM_Base_MspInit+0xc0>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_TIM_Base_MspInit+0xc8>)
 800166a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 800166e:	2207      	movs	r2, #7
 8001670:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 8001674:	2210      	movs	r2, #16
 8001676:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 8001686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 800168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001692:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016a0:	4817      	ldr	r0, [pc, #92]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 80016a2:	f000 fb65 	bl	8001d70 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80016ac:	f7ff ff2c 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_TIM_Base_MspInit+0xc4>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016bc:	e018      	b.n	80016f0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c6:	d113      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_TIM_Base_MspInit+0xc0>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_TIM_Base_MspInit+0xc0>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_TIM_Base_MspInit+0xc0>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	201c      	movs	r0, #28
 80016e6:	f000 fb0c 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ea:	201c      	movs	r0, #28
 80016ec:	f000 fb25 	bl	8001d3a <HAL_NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	20000170 	.word	0x20000170
 8001704:	4002001c 	.word	0x4002001c

08001708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_TIM_MspPostInit+0x68>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d11d      	bne.n	8001766 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_TIM_MspPostInit+0x6c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_TIM_MspPostInit+0x6c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_TIM_MspPostInit+0x6c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001754:	2301      	movs	r3, #1
 8001756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f000 fd7b 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40012c00 	.word	0x40012c00
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0ae      	sub	sp, #184	; 0xb8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2288      	movs	r2, #136	; 0x88
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f006 fa41 	bl	8007c20 <memset>
  if(huart->Instance==UART5)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <HAL_UART_MspInit+0x198>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d165      	bne.n	8001874 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80017a8:	2310      	movs	r3, #16
 80017aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fd77 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c0:	f7ff fea2 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017dc:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001800:	4b44      	ldr	r3, [pc, #272]	; (8001914 <HAL_UART_MspInit+0x19c>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001826:	2308      	movs	r3, #8
 8001828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001830:	4619      	mov	r1, r3
 8001832:	4839      	ldr	r0, [pc, #228]	; (8001918 <HAL_UART_MspInit+0x1a0>)
 8001834:	f000 fd12 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001838:	2304      	movs	r3, #4
 800183a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001850:	2308      	movs	r3, #8
 8001852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001856:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800185a:	4619      	mov	r1, r3
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <HAL_UART_MspInit+0x1a4>)
 800185e:	f000 fcfd 	bl	800225c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2035      	movs	r0, #53	; 0x35
 8001868:	f000 fa4b 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800186c:	2035      	movs	r0, #53	; 0x35
 800186e:	f000 fa64 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001872:	e048      	b.n	8001906 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_UART_MspInit+0x1a8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d143      	bne.n	8001906 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001882:	2300      	movs	r3, #0
 8001884:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fd0c 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001896:	f7ff fe37 	bl	8001508 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_UART_MspInit+0x19c>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_UART_MspInit+0x19c>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ca:	230c      	movs	r3, #12
 80018cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f000 fcb3 	bl	800225c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2026      	movs	r0, #38	; 0x26
 80018fc:	f000 fa01 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001900:	2026      	movs	r0, #38	; 0x26
 8001902:	f000 fa1a 	bl	8001d3a <HAL_NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	37b8      	adds	r7, #184	; 0xb8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40005000 	.word	0x40005000
 8001914:	40021000 	.word	0x40021000
 8001918:	48000800 	.word	0x48000800
 800191c:	48000c00 	.word	0x48000c00
 8001920:	40004400 	.word	0x40004400

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f8cc 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA1_Channel2_IRQHandler+0x10>)
 800197e:	f000 fb8e 	bl	800209e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000170 	.word	0x20000170

0800198c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Channel3_IRQHandler+0x10>)
 8001992:	f000 fb84 	bl	800209e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000090 	.word	0x20000090

080019a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM2_IRQHandler+0x10>)
 80019a6:	f002 fe1f 	bl	80045e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000124 	.word	0x20000124

080019b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <USART2_IRQHandler+0x10>)
 80019ba:	f004 f86f 	bl	8005a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000240 	.word	0x20000240

080019c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <UART5_IRQHandler+0x10>)
 80019ce:	f004 f865 	bl	8005a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001b8 	.word	0x200001b8

080019dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f006 f8ff 	bl	8007c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7ff fa35 	bl	8000ea0 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a44:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 8001a48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a4c:	200006f8 	.word	0x200006f8

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_Init+0x3c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_Init+0x3c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f93e 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a70:	2000      	movs	r0, #0
 8001a72:	f000 f80f 	bl	8001a94 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	e001      	b.n	8001a86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a82:	f7ff fd47 	bl	8001514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_InitTick+0x6c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_InitTick+0x70>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_InitTick+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f949 	bl	8001d56 <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10f      	bne.n	8001aea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d809      	bhi.n	8001ae4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f913 	bl	8001d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_InitTick+0x74>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e004      	b.n	8001af4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e001      	b.n	8001af4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	200002d4 	.word	0x200002d4

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200002d4 	.word	0x200002d4

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff29 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff3e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff31 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e098      	b.n	8001eb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <HAL_DMA_Init+0x150>)
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d80f      	bhi.n	8001dae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_DMA_Init+0x154>)
 8001d96:	4413      	add	r3, r2
 8001d98:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <HAL_DMA_Init+0x158>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	009a      	lsls	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <HAL_DMA_Init+0x15c>)
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
 8001dac:	e00e      	b.n	8001dcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_DMA_Init+0x160>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <HAL_DMA_Init+0x158>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_DMA_Init+0x164>)
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e26:	d039      	beq.n	8001e9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_DMA_Init+0x15c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d11a      	bne.n	8001e68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_DMA_Init+0x168>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f003 031c 	and.w	r3, r3, #28
 8001e3e:	210f      	movs	r1, #15
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4924      	ldr	r1, [pc, #144]	; (8001ed8 <HAL_DMA_Init+0x168>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_DMA_Init+0x168>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	f003 031c 	and.w	r3, r3, #28
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	491d      	ldr	r1, [pc, #116]	; (8001ed8 <HAL_DMA_Init+0x168>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
 8001e66:	e019      	b.n	8001e9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_DMA_Init+0x16c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f003 031c 	and.w	r3, r3, #28
 8001e74:	210f      	movs	r1, #15
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4917      	ldr	r1, [pc, #92]	; (8001edc <HAL_DMA_Init+0x16c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_DMA_Init+0x16c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f003 031c 	and.w	r3, r3, #28
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	4911      	ldr	r1, [pc, #68]	; (8001edc <HAL_DMA_Init+0x16c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40020407 	.word	0x40020407
 8001ec4:	bffdfff8 	.word	0xbffdfff8
 8001ec8:	cccccccd 	.word	0xcccccccd
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	bffdfbf8 	.word	0xbffdfbf8
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	400200a8 	.word	0x400200a8
 8001edc:	400204a8 	.word	0x400204a8

08001ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Start_IT+0x20>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e04b      	b.n	8001f98 <HAL_DMA_Start_IT+0xb8>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d13a      	bne.n	8001f8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f95f 	bl	80021fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 020e 	orr.w	r2, r2, #14
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 020a 	orr.w	r2, r2, #10
 8001f76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e005      	b.n	8001f96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d008      	beq.n	8001fca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e022      	b.n	8002010 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 020e 	bic.w	r2, r2, #14
 8001fd8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f003 021c 	and.w	r2, r3, #28
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d005      	beq.n	8002040 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e029      	b.n	8002094 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 020e 	bic.w	r2, r2, #14
 800204e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f003 021c 	and.w	r2, r3, #28
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
    }
  }
  return status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f003 031c 	and.w	r3, r3, #28
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d026      	beq.n	8002118 <HAL_DMA_IRQHandler+0x7a>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d021      	beq.n	8002118 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d107      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0204 	bic.w	r2, r2, #4
 80020f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 021c 	and.w	r2, r3, #28
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2104      	movs	r1, #4
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	2b00      	cmp	r3, #0
 800210c:	d071      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002116:	e06c      	b.n	80021f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f003 031c 	and.w	r3, r3, #28
 8002120:	2202      	movs	r2, #2
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02e      	beq.n	800218a <HAL_DMA_IRQHandler+0xec>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d029      	beq.n	800218a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 020a 	bic.w	r2, r2, #10
 8002152:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f003 021c 	and.w	r2, r3, #28
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2102      	movs	r1, #2
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d038      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002188:	e033      	b.n	80021f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 031c 	and.w	r3, r3, #28
 8002192:	2208      	movs	r2, #8
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d02a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x156>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d025      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 020e 	bic.w	r2, r2, #14
 80021b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	f003 021c 	and.w	r2, r3, #28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
}
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f003 021c 	and.w	r2, r3, #28
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b10      	cmp	r3, #16
 800222c:	d108      	bne.n	8002240 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800223e:	e007      	b.n	8002250 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	e17f      	b.n	800256c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8171 	beq.w	8002566 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d005      	beq.n	800229c <HAL_GPIO_Init+0x40>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d130      	bne.n	80022fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022d2:	2201      	movs	r2, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0201 	and.w	r2, r3, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b03      	cmp	r3, #3
 8002308:	d118      	bne.n	800233c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	6939      	ldr	r1, [r7, #16]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ac 	beq.w	8002566 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_GPIO_Init+0x330>)
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	4a5e      	ldr	r2, [pc, #376]	; (800258c <HAL_GPIO_Init+0x330>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6613      	str	r3, [r2, #96]	; 0x60
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_GPIO_Init+0x330>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002426:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002450:	d025      	beq.n	800249e <HAL_GPIO_Init+0x242>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_GPIO_Init+0x338>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01f      	beq.n	800249a <HAL_GPIO_Init+0x23e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <HAL_GPIO_Init+0x33c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x23a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_GPIO_Init+0x340>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x236>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4c      	ldr	r2, [pc, #304]	; (80025a0 <HAL_GPIO_Init+0x344>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x232>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_GPIO_Init+0x348>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x22e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4a      	ldr	r2, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x34c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x22a>
 8002482:	2306      	movs	r3, #6
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 8002486:	2307      	movs	r3, #7
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800249e:	2300      	movs	r3, #0
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024b0:	4937      	ldr	r1, [pc, #220]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_GPIO_Init+0x350>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024e2:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_GPIO_Init+0x350>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_GPIO_Init+0x350>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_GPIO_Init+0x350>)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_GPIO_Init+0x350>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_GPIO_Init+0x350>)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_GPIO_Init+0x350>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_GPIO_Init+0x350>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f ae78 	bne.w	800226c <HAL_GPIO_Init+0x10>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	48000400 	.word	0x48000400
 8002598:	48000800 	.word	0x48000800
 800259c:	48000c00 	.word	0x48000c00
 80025a0:	48001000 	.word	0x48001000
 80025a4:	48001400 	.word	0x48001400
 80025a8:	48001800 	.word	0x48001800
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260a:	d130      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d038      	beq.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2232      	movs	r2, #50	; 0x32
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002640:	e002      	b.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002654:	d102      	bne.n	800265c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f2      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d110      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e00f      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267a:	d007      	beq.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002684:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40007000 	.word	0x40007000
 80026a0:	20000000 	.word	0x20000000
 80026a4:	431bde83 	.word	0x431bde83

080026a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e3ca      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4b97      	ldr	r3, [pc, #604]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80e4 	beq.w	80028a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4a>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	f040 808b 	bne.w	8002800 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 8087 	bne.w	8002800 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026f2:	4b89      	ldr	r3, [pc, #548]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x62>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e3a2      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	4b82      	ldr	r3, [pc, #520]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_RCC_OscConfig+0x7c>
 800271a:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002722:	e005      	b.n	8002730 <HAL_RCC_OscConfig+0x88>
 8002724:	4b7c      	ldr	r3, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002730:	4293      	cmp	r3, r2
 8002732:	d223      	bcs.n	800277c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fd55 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e383      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002748:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a72      	ldr	r2, [pc, #456]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b70      	ldr	r3, [pc, #448]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	496d      	ldr	r1, [pc, #436]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002766:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	4968      	ldr	r1, [pc, #416]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	e025      	b.n	80027c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277c:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4960      	ldr	r1, [pc, #384]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	495b      	ldr	r1, [pc, #364]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd15 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e343      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c8:	f000 fc4a 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b52      	ldr	r3, [pc, #328]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	4950      	ldr	r1, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	4a4e      	ldr	r2, [pc, #312]	; (8002920 <HAL_RCC_OscConfig+0x278>)
 80027e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027e8:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f951 	bl	8001a94 <HAL_InitTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d052      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	e327      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d032      	beq.n	800286e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002814:	f7ff f98e 	bl	8001b34 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800281c:	f7ff f98a 	bl	8001b34 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e310      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a36      	ldr	r2, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002840:	f043 0308 	orr.w	r3, r3, #8
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4931      	ldr	r1, [pc, #196]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	492c      	ldr	r1, [pc, #176]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e01a      	b.n	80028a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a29      	ldr	r2, [pc, #164]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800287a:	f7ff f95b 	bl	8001b34 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002882:	f7ff f957 	bl	8001b34 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e2dd      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x1da>
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d074      	beq.n	800299a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x21a>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d10e      	bne.n	80028da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d064      	beq.n	8002998 <HAL_RCC_OscConfig+0x2f0>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d160      	bne.n	8002998 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e2ba      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x24a>
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e026      	b.n	8002940 <HAL_RCC_OscConfig+0x298>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fa:	d115      	bne.n	8002928 <HAL_RCC_OscConfig+0x280>
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a02      	ldr	r2, [pc, #8]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x298>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	08008dd0 	.word	0x08008dd0
 8002920:	20000000 	.word	0x20000000
 8002924:	20000004 	.word	0x20000004
 8002928:	4ba0      	ldr	r3, [pc, #640]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a9f      	ldr	r2, [pc, #636]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b9d      	ldr	r3, [pc, #628]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a9c      	ldr	r2, [pc, #624]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff f8f4 	bl	8001b34 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff f8f0 	bl	8001b34 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e276      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002962:	4b92      	ldr	r3, [pc, #584]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x2a8>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff f8e0 	bl	8001b34 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff f8dc 	bl	8001b34 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e262      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x2d0>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d060      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x310>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d116      	bne.n	80029e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b8:	4b7c      	ldr	r3, [pc, #496]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x328>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e23f      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	4973      	ldr	r1, [pc, #460]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e4:	e040      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d023      	beq.n	8002a36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ee:	4b6f      	ldr	r3, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6e      	ldr	r2, [pc, #440]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff f89b 	bl	8001b34 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff f897 	bl	8001b34 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e21d      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	4b65      	ldr	r3, [pc, #404]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	495f      	ldr	r1, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5c      	ldr	r2, [pc, #368]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7ff f877 	bl	8001b34 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7ff f873 	bl	8001b34 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1f9      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d03c      	beq.n	8002aee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff f852 	bl	8001b34 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff f84e 	bl	8001b34 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1d4      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <HAL_RCC_OscConfig+0x3ec>
 8002ab4:	e01b      	b.n	8002aee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7ff f835 	bl	8001b34 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff f831 	bl	8001b34 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1b7      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ef      	bne.n	8002ace <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80a6 	beq.w	8002c48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	6593      	str	r3, [r2, #88]	; 0x58
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d118      	bne.n	8002b66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fff8 	bl	8001b34 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe fff4 	bl	8001b34 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e17a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d8>
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b7e:	e029      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x50c>
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a03      	ldr	r2, [pc, #12]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	4a9b      	ldr	r2, [pc, #620]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc4:	4b98      	ldr	r3, [pc, #608]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a97      	ldr	r2, [pc, #604]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe ffaa 	bl	8001b34 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe ffa6 	bl	8001b34 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e12a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	4b8b      	ldr	r3, [pc, #556]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ed      	beq.n	8002be4 <HAL_RCC_OscConfig+0x53c>
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7fe ff93 	bl	8001b34 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe ff8f 	bl	8001b34 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e113      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c28:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ed      	bne.n	8002c12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3c:	4b7a      	ldr	r3, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a79      	ldr	r2, [pc, #484]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80fe 	beq.w	8002e4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 80d0 	bne.w	8002dfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c5c:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0203 	and.w	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d130      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d127      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11f      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c9c:	2a07      	cmp	r2, #7
 8002c9e:	bf14      	ite	ne
 8002ca0:	2201      	movne	r2, #1
 8002ca2:	2200      	moveq	r2, #0
 8002ca4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d113      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d06e      	beq.n	8002db0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	d069      	beq.n	8002dac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0ad      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d00:	f7fe ff18 	bl	8001b34 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe ff14 	bl	8001b34 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e09a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <HAL_RCC_OscConfig+0x784>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d36:	3a01      	subs	r2, #1
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d40:	0212      	lsls	r2, r2, #8
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d48:	0852      	lsrs	r2, r2, #1
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	0552      	lsls	r2, r2, #21
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d54:	0852      	lsrs	r2, r2, #1
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0652      	lsls	r2, r2, #25
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d60:	0912      	lsrs	r2, r2, #4
 8002d62:	0452      	lsls	r2, r2, #17
 8002d64:	430a      	orrs	r2, r1
 8002d66:	4930      	ldr	r1, [pc, #192]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d84:	f7fe fed6 	bl	8001b34 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fed2 	bl	8001b34 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e058      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002daa:	e050      	b.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04f      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d148      	bne.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd4:	f7fe feae 	bl	8001b34 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe feaa 	bl	8001b34 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e030      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x734>
 8002dfa:	e028      	b.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d023      	beq.n	8002e4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fe91 	bl	8001b34 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	e00c      	b.n	8002e30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fe8d 	bl	8001b34 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d905      	bls.n	8002e30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e013      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_OscConfig+0x7b0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ec      	bne.n	8002e16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x7b0>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4905      	ldr	r1, [pc, #20]	; (8002e58 <HAL_RCC_OscConfig+0x7b0>)
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x7b4>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
 8002e48:	e001      	b.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	feeefffc 	.word	0xfeeefffc

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0e7      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b72      	ldr	r3, [pc, #456]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4970      	ldr	r1, [pc, #448]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b6e      	ldr	r3, [pc, #440]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0cf      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4960      	ldr	r1, [pc, #384]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d04c      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0a6      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efe:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d115      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e09a      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e08e      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e086      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b46      	ldr	r3, [pc, #280]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4943      	ldr	r1, [pc, #268]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe fdf4 	bl	8001b34 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe fdf0 	bl	8001b34 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e06e      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d208      	bcs.n	8002fa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	492b      	ldr	r1, [pc, #172]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d210      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 0207 	bic.w	r2, r3, #7
 8002fbc:	4923      	ldr	r1, [pc, #140]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e036      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4918      	ldr	r1, [pc, #96]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4910      	ldr	r1, [pc, #64]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003014:	f000 f824 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	490b      	ldr	r1, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1f4>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
 8003030:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1f8>)
 8003032:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1fc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fd2b 	bl	8001a94 <HAL_InitTick>
 800303e:	4603      	mov	r3, r0
 8003040:	72fb      	strb	r3, [r7, #11]

  return status;
 8003042:	7afb      	ldrb	r3, [r7, #11]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40022000 	.word	0x40022000
 8003050:	40021000 	.word	0x40021000
 8003054:	08008dd0 	.word	0x08008dd0
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306e:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d121      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d11e      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e005      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_GetSysClockFreq+0x110>)
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e004      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d134      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ee:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0xa6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0xac>
 8003104:	e005      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_GetSysClockFreq+0x110>)
 8003108:	617b      	str	r3, [r7, #20]
      break;
 800310a:	e005      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_GetSysClockFreq+0x114>)
 800310e:	617b      	str	r3, [r7, #20]
      break;
 8003110:	e002      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	617b      	str	r3, [r7, #20]
      break;
 8003116:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	3301      	adds	r3, #1
 8003124:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	fb03 f202 	mul.w	r2, r3, r2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0e5b      	lsrs	r3, r3, #25
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	3301      	adds	r3, #1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003158:	69bb      	ldr	r3, [r7, #24]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	08008de8 	.word	0x08008de8
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08008de0 	.word	0x08008de0

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c0:	f7ff ffda 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0adb      	lsrs	r3, r3, #11
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08008de0 	.word	0x08008de0

080031e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003200:	f7ff f9ee 	bl	80025e0 <HAL_PWREx_GetVoltageRange>
 8003204:	6178      	str	r0, [r7, #20]
 8003206:	e014      	b.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003220:	f7ff f9de 	bl	80025e0 <HAL_PWREx_GetVoltageRange>
 8003224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003238:	d10b      	bne.n	8003252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d919      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2ba0      	cmp	r3, #160	; 0xa0
 8003244:	d902      	bls.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003246:	2302      	movs	r3, #2
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	e013      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800324c:	2301      	movs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e010      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d902      	bls.n	800325e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003258:	2303      	movs	r3, #3
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	e00a      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d102      	bne.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003264:	2302      	movs	r3, #2
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e004      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d101      	bne.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003270:	2301      	movs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0207 	bic.w	r2, r3, #7
 800327c:	4909      	ldr	r1, [pc, #36]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40022000 	.word	0x40022000

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d041      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032cc:	d02a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032d2:	d824      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032de:	d81e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e8:	d010      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ea:	e018      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ec:	4b86      	ldr	r3, [pc, #536]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a85      	ldr	r2, [pc, #532]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f8:	e015      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fabb 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330a:	e00c      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3320      	adds	r3, #32
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fba6 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	74fb      	strb	r3, [r7, #19]
      break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800332c:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333a:	4973      	ldr	r1, [pc, #460]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d041      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800335c:	d02a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800335e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003362:	d824      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800336a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336e:	d81e      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d010      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800337a:	e018      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800337c:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a61      	ldr	r2, [pc, #388]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003386:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003388:	e015      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fa73 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339a:	e00c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3320      	adds	r3, #32
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fb5e 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ac:	e003      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	74fb      	strb	r3, [r7, #19]
      break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ca:	494f      	ldr	r1, [pc, #316]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a0 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	4a40      	ldr	r2, [pc, #256]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	; 0x58
 800340c:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3a      	ldr	r2, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003428:	f7fe fb84 	bl	8001b34 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342e:	e009      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fe fb80 	bl	8001b34 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
        break;
 8003442:	e005      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003444:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d15c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01f      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	d019      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003480:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fb3f 	bl	8001b34 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	e00b      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe fb3b 	bl	8001b34 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d902      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	74fb      	strb	r3, [r7, #19]
            break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ec      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f6:	4904      	ldr	r1, [pc, #16]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003514:	7c7b      	ldrb	r3, [r7, #17]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4b9e      	ldr	r3, [pc, #632]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a9d      	ldr	r2, [pc, #628]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003532:	4b98      	ldr	r3, [pc, #608]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	4994      	ldr	r1, [pc, #592]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 020c 	bic.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	498c      	ldr	r1, [pc, #560]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003576:	4b87      	ldr	r3, [pc, #540]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4983      	ldr	r1, [pc, #524]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	497b      	ldr	r1, [pc, #492]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c8:	4972      	ldr	r1, [pc, #456]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	496a      	ldr	r1, [pc, #424]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	4961      	ldr	r1, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003620:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	4959      	ldr	r1, [pc, #356]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	4950      	ldr	r1, [pc, #320]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003664:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	4948      	ldr	r1, [pc, #288]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	493f      	ldr	r1, [pc, #252]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d028      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a8:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b6:	4937      	ldr	r1, [pc, #220]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a31      	ldr	r2, [pc, #196]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e011      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036de:	d10c      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8c8 	bl	800387c <RCCEx_PLLSAI1_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	491f      	ldr	r1, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d106      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003730:	60d3      	str	r3, [r2, #12]
 8003732:	e011      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f899 	bl	800387c <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02b      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4908      	ldr	r1, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003782:	d109      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378e:	60d3      	str	r3, [r2, #12]
 8003790:	e014      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f867 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	4928      	ldr	r1, [pc, #160]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f844 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3320      	adds	r3, #32
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f925 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003842:	490d      	ldr	r1, [pc, #52]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800386e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000

0800387c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800388a:	4b75      	ldr	r3, [pc, #468]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003896:	4b72      	ldr	r3, [pc, #456]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
       ||
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ae:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
       ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d047      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e044      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d018      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x86>
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d825      	bhi.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d002      	beq.n	80038de <RCCEx_PLLSAI1_Config+0x62>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d009      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x74>
 80038dc:	e020      	b.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038de:	4b60      	ldr	r3, [pc, #384]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11d      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e01a      	b.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f0:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003900:	e013      	b.n	800392a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800391e:	e006      	b.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e004      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003936:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	430b      	orrs	r3, r1
 800394c:	4944      	ldr	r1, [pc, #272]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d17d      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003958:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a40      	ldr	r2, [pc, #256]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fe f8e6 	bl	8001b34 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fe f8e2 	bl	8001b34 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
        break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003980:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ef      	bne.n	800396c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d160      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d111      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0912      	lsrs	r2, r2, #4
 80039b0:	0452      	lsls	r2, r2, #17
 80039b2:	430a      	orrs	r2, r1
 80039b4:	492a      	ldr	r1, [pc, #168]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	610b      	str	r3, [r1, #16]
 80039ba:	e027      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d112      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c2:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	0211      	lsls	r1, r2, #8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6912      	ldr	r2, [r2, #16]
 80039d8:	0852      	lsrs	r2, r2, #1
 80039da:	3a01      	subs	r2, #1
 80039dc:	0552      	lsls	r2, r2, #21
 80039de:	430a      	orrs	r2, r1
 80039e0:	491f      	ldr	r1, [pc, #124]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]
 80039e6:	e011      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6952      	ldr	r2, [r2, #20]
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0652      	lsls	r2, r2, #25
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4916      	ldr	r1, [pc, #88]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe f88c 	bl	8001b34 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fe f888 	bl	8001b34 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
          break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4904      	ldr	r1, [pc, #16]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000

08003a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a72:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a7e:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
       ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a96:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d047      	beq.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e044      	b.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d018      	beq.n	8003aea <RCCEx_PLLSAI2_Config+0x86>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d825      	bhi.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d002      	beq.n	8003ac6 <RCCEx_PLLSAI2_Config+0x62>
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d009      	beq.n	8003ad8 <RCCEx_PLLSAI2_Config+0x74>
 8003ac4:	e020      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac6:	4b55      	ldr	r3, [pc, #340]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11d      	bne.n	8003b0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e01a      	b.n	8003b0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e013      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af6:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b06:	e006      	b.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e004      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	430b      	orrs	r3, r1
 8003b34:	4939      	ldr	r1, [pc, #228]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d167      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fd fff2 	bl	8001b34 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b54:	f7fd ffee 	bl	8001b34 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
        break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ef      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d14a      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b80:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	0912      	lsrs	r2, r2, #4
 8003b98:	0452      	lsls	r2, r2, #17
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	491f      	ldr	r1, [pc, #124]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	614b      	str	r3, [r1, #20]
 8003ba2:	e011      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6912      	ldr	r2, [r2, #16]
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0652      	lsls	r2, r2, #25
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	4916      	ldr	r1, [pc, #88]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd ffae 	bl	8001b34 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bda:	e009      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bdc:	f7fd ffaa 	bl	8001b34 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	73fb      	strb	r3, [r7, #15]
          break;
 8003bee:	e005      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	4904      	ldr	r1, [pc, #16]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e095      	b.n	8003d5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c42:	d009      	beq.n	8003c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
 8003c4a:	e005      	b.n	8003c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fc72 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c98:	d902      	bls.n	8003ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e002      	b.n	8003ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cae:	d007      	beq.n	8003cc0 <HAL_SPI_Init+0xa0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	ea42 0103 	orr.w	r1, r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 0204 	and.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d3c:	ea42 0103 	orr.w	r1, r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e049      	b.n	8003e0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd fc55 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f001 f801 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e04f      	b.n	8003ecc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x76>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e56:	d018      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x76>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_TIM_Base_Start_IT+0xc8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x76>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x76>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x76>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x76>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_TIM_Base_Start_IT+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d115      	bne.n	8003eb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b06      	cmp	r3, #6
 8003e9a:	d015      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0xb4>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d011      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb4:	e008      	b.n	8003ec8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e000      	b.n	8003eca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40013400 	.word	0x40013400
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	00010007 	.word	0x00010007

08003ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e049      	b.n	8003f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f841 	bl	8003fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 ff3a 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e03c      	b.n	800405e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d109      	bne.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x46>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e02f      	b.n	800405e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d109      	bne.n	8004018 <HAL_TIM_PWM_Start_DMA+0x60>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e022      	b.n	800405e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d109      	bne.n	8004032 <HAL_TIM_PWM_Start_DMA+0x7a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e015      	b.n	800405e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d109      	bne.n	800404c <HAL_TIM_PWM_Start_DMA+0x94>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e008      	b.n	800405e <HAL_TIM_PWM_Start_DMA+0xa6>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	e1ab      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_TIM_PWM_Start_DMA+0xc8>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e03c      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x142>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b04      	cmp	r3, #4
 8004084:	d109      	bne.n	800409a <HAL_TIM_PWM_Start_DMA+0xe2>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e02f      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x142>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d109      	bne.n	80040b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e022      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x142>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d109      	bne.n	80040ce <HAL_TIM_PWM_Start_DMA+0x116>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e015      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x142>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_PWM_Start_DMA+0x130>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e008      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x142>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d034      	beq.n	8004168 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_TIM_PWM_Start_DMA+0x152>
 8004104:	887b      	ldrh	r3, [r7, #2]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e157      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start_DMA+0x166>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411c:	e026      	b.n	800416c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start_DMA+0x176>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412c:	e01e      	b.n	800416c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start_DMA+0x186>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800413c:	e016      	b.n	800416c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start_DMA+0x196>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800414c:	e00e      	b.n	800416c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b10      	cmp	r3, #16
 8004152:	d104      	bne.n	800415e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	e006      	b.n	800416c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004166:	e001      	b.n	800416c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e128      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	f200 80ae 	bhi.w	80042d0 <HAL_TIM_PWM_Start_DMA+0x318>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080042d1 	.word	0x080042d1
 8004184:	080042d1 	.word	0x080042d1
 8004188:	080042d1 	.word	0x080042d1
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080042d1 	.word	0x080042d1
 8004194:	080042d1 	.word	0x080042d1
 8004198:	080042d1 	.word	0x080042d1
 800419c:	08004241 	.word	0x08004241
 80041a0:	080042d1 	.word	0x080042d1
 80041a4:	080042d1 	.word	0x080042d1
 80041a8:	080042d1 	.word	0x080042d1
 80041ac:	08004289 	.word	0x08004289
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	4a84      	ldr	r2, [pc, #528]	; (80043c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	4a83      	ldr	r2, [pc, #524]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x414>)
 80041be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	4a82      	ldr	r2, [pc, #520]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3334      	adds	r3, #52	; 0x34
 80041d4:	461a      	mov	r2, r3
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	f7fd fe82 	bl	8001ee0 <HAL_DMA_Start_IT>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0eb      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f4:	60da      	str	r2, [r3, #12]
      break;
 80041f6:	e06e      	b.n	80042d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	4a72      	ldr	r2, [pc, #456]	; (80043c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	4a71      	ldr	r2, [pc, #452]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x414>)
 8004206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	4a70      	ldr	r2, [pc, #448]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3338      	adds	r3, #56	; 0x38
 800421c:	461a      	mov	r2, r3
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	f7fd fe5e 	bl	8001ee0 <HAL_DMA_Start_IT>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0c7      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800423c:	60da      	str	r2, [r3, #12]
      break;
 800423e:	e04a      	b.n	80042d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4a60      	ldr	r2, [pc, #384]	; (80043c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	4a5f      	ldr	r2, [pc, #380]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x414>)
 800424e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a5e      	ldr	r2, [pc, #376]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004256:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	333c      	adds	r3, #60	; 0x3c
 8004264:	461a      	mov	r2, r3
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	f7fd fe3a 	bl	8001ee0 <HAL_DMA_Start_IT>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0a3      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004284:	60da      	str	r2, [r3, #12]
      break;
 8004286:	e026      	b.n	80042d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	4a4e      	ldr	r2, [pc, #312]	; (80043c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	4a4d      	ldr	r2, [pc, #308]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x414>)
 8004296:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	4a4c      	ldr	r2, [pc, #304]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800429e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3340      	adds	r3, #64	; 0x40
 80042ac:	461a      	mov	r2, r3
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	f7fd fe16 	bl	8001ee0 <HAL_DMA_Start_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e07f      	b.n	80043be <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042cc:	60da      	str	r2, [r3, #12]
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
      break;
 80042d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d16f      	bne.n	80043bc <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2201      	movs	r2, #1
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 f96b 	bl	80055c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_TIM_PWM_Start_DMA+0x364>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a37      	ldr	r2, [pc, #220]	; (80043d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_TIM_PWM_Start_DMA+0x364>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a36      	ldr	r2, [pc, #216]	; (80043dc <HAL_TIM_PWM_Start_DMA+0x424>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_TIM_PWM_Start_DMA+0x364>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a34      	ldr	r2, [pc, #208]	; (80043e0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_TIM_PWM_Start_DMA+0x364>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_TIM_PWM_Start_DMA+0x368>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d018      	beq.n	800437c <HAL_TIM_PWM_Start_DMA+0x3c4>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a24      	ldr	r2, [pc, #144]	; (80043ec <HAL_TIM_PWM_Start_DMA+0x434>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_PWM_Start_DMA+0x3c4>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a23      	ldr	r2, [pc, #140]	; (80043f0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_TIM_PWM_Start_DMA+0x424>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d115      	bne.n	80043a8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d015      	beq.n	80043ba <HAL_TIM_PWM_Start_DMA+0x402>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d011      	beq.n	80043ba <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	e008      	b.n	80043ba <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	08004c9d 	.word	0x08004c9d
 80043cc:	08004d45 	.word	0x08004d45
 80043d0:	08004c0b 	.word	0x08004c0b
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40013400 	.word	0x40013400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	00010007 	.word	0x00010007

080043f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d855      	bhi.n	80044b8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004449 	.word	0x08004449
 8004418:	080044b9 	.word	0x080044b9
 800441c:	080044b9 	.word	0x080044b9
 8004420:	080044b9 	.word	0x080044b9
 8004424:	08004465 	.word	0x08004465
 8004428:	080044b9 	.word	0x080044b9
 800442c:	080044b9 	.word	0x080044b9
 8004430:	080044b9 	.word	0x080044b9
 8004434:	08004481 	.word	0x08004481
 8004438:	080044b9 	.word	0x080044b9
 800443c:	080044b9 	.word	0x080044b9
 8004440:	080044b9 	.word	0x080044b9
 8004444:	0800449d 	.word	0x0800449d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004456:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fddd 	bl	800201c <HAL_DMA_Abort_IT>
      break;
 8004462:	e02c      	b.n	80044be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	4618      	mov	r0, r3
 800447a:	f7fd fdcf 	bl	800201c <HAL_DMA_Abort_IT>
      break;
 800447e:	e01e      	b.n	80044be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd fdc1 	bl	800201c <HAL_DMA_Abort_IT>
      break;
 800449a:	e010      	b.n	80044be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fdb3 	bl	800201c <HAL_DMA_Abort_IT>
      break;
 80044b6:	e002      	b.n	80044be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      break;
 80044bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 8081 	bne.w	80045c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 f876 	bl	80055c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a3e      	ldr	r2, [pc, #248]	; (80045d4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3b      	ldr	r2, [pc, #236]	; (80045dc <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3a      	ldr	r2, [pc, #232]	; (80045e0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a38      	ldr	r2, [pc, #224]	; (80045e4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_TIM_PWM_Stop_DMA+0x112>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_TIM_PWM_Stop_DMA+0x114>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	f241 1311 	movw	r3, #4369	; 0x1111
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	f240 4344 	movw	r3, #1092	; 0x444
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	f241 1311 	movw	r3, #4369	; 0x1111
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10f      	bne.n	8004570 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	f240 4344 	movw	r3, #1092	; 0x444
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457e:	e023      	b.n	80045c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d104      	bne.n	8004590 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458e:	e01b      	b.n	80045c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d104      	bne.n	80045a0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800459e:	e013      	b.n	80045c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d104      	bne.n	80045b0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ae:	e00b      	b.n	80045c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d104      	bne.n	80045c0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045be:	e003      	b.n	80045c8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d020      	beq.n	800464c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01b      	beq.n	800464c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0202 	mvn.w	r2, #2
 800461c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fac1 	bl	8004bba <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fab3 	bl	8004ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc ff4d 	bl	80014e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d020      	beq.n	8004698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01b      	beq.n	8004698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0204 	mvn.w	r2, #4
 8004668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa9b 	bl	8004bba <HAL_TIM_IC_CaptureCallback>
 8004684:	e005      	b.n	8004692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa8d 	bl	8004ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fc ff27 	bl	80014e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d020      	beq.n	80046e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0208 	mvn.w	r2, #8
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2204      	movs	r2, #4
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa75 	bl	8004bba <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa67 	bl	8004ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fc ff01 	bl	80014e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d020      	beq.n	8004730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01b      	beq.n	8004730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0210 	mvn.w	r2, #16
 8004700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2208      	movs	r2, #8
 8004706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa4f 	bl	8004bba <HAL_TIM_IC_CaptureCallback>
 800471c:	e005      	b.n	800472a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa41 	bl	8004ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc fedb 	bl	80014e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0201 	mvn.w	r2, #1
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc feb0 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f001 f85a 	bl	800582c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 f852 	bl	8005840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa11 	bl	8004be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0220 	mvn.w	r2, #32
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 f81a 	bl	8005818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004806:	2302      	movs	r3, #2
 8004808:	e0ff      	b.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b14      	cmp	r3, #20
 8004816:	f200 80f0 	bhi.w	80049fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004875 	.word	0x08004875
 8004824:	080049fb 	.word	0x080049fb
 8004828:	080049fb 	.word	0x080049fb
 800482c:	080049fb 	.word	0x080049fb
 8004830:	080048b5 	.word	0x080048b5
 8004834:	080049fb 	.word	0x080049fb
 8004838:	080049fb 	.word	0x080049fb
 800483c:	080049fb 	.word	0x080049fb
 8004840:	080048f7 	.word	0x080048f7
 8004844:	080049fb 	.word	0x080049fb
 8004848:	080049fb 	.word	0x080049fb
 800484c:	080049fb 	.word	0x080049fb
 8004850:	08004937 	.word	0x08004937
 8004854:	080049fb 	.word	0x080049fb
 8004858:	080049fb 	.word	0x080049fb
 800485c:	080049fb 	.word	0x080049fb
 8004860:	08004979 	.word	0x08004979
 8004864:	080049fb 	.word	0x080049fb
 8004868:	080049fb 	.word	0x080049fb
 800486c:	080049fb 	.word	0x080049fb
 8004870:	080049b9 	.word	0x080049b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fb30 	bl	8004ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0208 	orr.w	r2, r2, #8
 800488e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0204 	bic.w	r2, r2, #4
 800489e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	619a      	str	r2, [r3, #24]
      break;
 80048b2:	e0a5      	b.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fba0 	bl	8005000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6999      	ldr	r1, [r3, #24]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	619a      	str	r2, [r3, #24]
      break;
 80048f4:	e084      	b.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fc09 	bl	8005114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0208 	orr.w	r2, r2, #8
 8004910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0204 	bic.w	r2, r2, #4
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	61da      	str	r2, [r3, #28]
      break;
 8004934:	e064      	b.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fc71 	bl	8005224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69d9      	ldr	r1, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	021a      	lsls	r2, r3, #8
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	61da      	str	r2, [r3, #28]
      break;
 8004976:	e043      	b.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fcba 	bl	80052f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0208 	orr.w	r2, r2, #8
 8004992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049b6:	e023      	b.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fcfe 	bl	80053c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049f8:	e002      	b.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
      break;
 80049fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop

08004a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_TIM_ConfigClockSource+0x1c>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e0b6      	b.n	8004b9e <HAL_TIM_ConfigClockSource+0x18a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6c:	d03e      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0xd8>
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	f200 8087 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	f000 8086 	beq.w	8004b8a <HAL_TIM_ConfigClockSource+0x176>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	d87f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004a84:	2b70      	cmp	r3, #112	; 0x70
 8004a86:	d01a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0xaa>
 8004a88:	2b70      	cmp	r3, #112	; 0x70
 8004a8a:	d87b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d050      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0x11e>
 8004a90:	2b60      	cmp	r3, #96	; 0x60
 8004a92:	d877      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004a94:	2b50      	cmp	r3, #80	; 0x50
 8004a96:	d03c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0xfe>
 8004a98:	2b50      	cmp	r3, #80	; 0x50
 8004a9a:	d873      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004a9c:	2b40      	cmp	r3, #64	; 0x40
 8004a9e:	d058      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x13e>
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d86f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004aa4:	2b30      	cmp	r3, #48	; 0x30
 8004aa6:	d064      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x15e>
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d86b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d060      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x15e>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d867      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05c      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x15e>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d05a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x15e>
 8004abc:	e062      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ace:	f000 fd57 	bl	8005580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	609a      	str	r2, [r3, #8]
      break;
 8004aea:	e04f      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004afc:	f000 fd40 	bl	8005580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b0e:	609a      	str	r2, [r3, #8]
      break;
 8004b10:	e03c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f000 fcb4 	bl	800548c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2150      	movs	r1, #80	; 0x50
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd0d 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004b30:	e02c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 fcd3 	bl	80054ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2160      	movs	r1, #96	; 0x60
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fcfd 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004b50:	e01c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fc94 	bl	800548c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2140      	movs	r1, #64	; 0x40
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fced 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004b70:	e00c      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 fce4 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004b82:	e003      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      break;
 8004b88:	e000      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d107      	bne.n	8004c32 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c30:	e02a      	b.n	8004c88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d107      	bne.n	8004c4c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c4a:	e01d      	b.n	8004c88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d107      	bne.n	8004c66 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	e010      	b.n	8004c88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d107      	bne.n	8004c80 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2208      	movs	r2, #8
 8004c74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c7e:	e003      	b.n	8004c88 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ffb4 	bl	8004bf6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d10b      	bne.n	8004ccc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d136      	bne.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cca:	e031      	b.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10b      	bne.n	8004cee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d125      	bne.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	e020      	b.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10b      	bne.n	8004d10 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d114      	bne.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d0e:	e00f      	b.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d10a      	bne.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7fc fbd5 	bl	80014e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d103      	bne.n	8004d64 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	771a      	strb	r2, [r3, #28]
 8004d62:	e019      	b.n	8004d98 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d103      	bne.n	8004d76 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2202      	movs	r2, #2
 8004d72:	771a      	strb	r2, [r3, #28]
 8004d74:	e010      	b.n	8004d98 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d103      	bne.n	8004d88 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2204      	movs	r2, #4
 8004d84:	771a      	strb	r2, [r3, #28]
 8004d86:	e007      	b.n	8004d98 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d102      	bne.n	8004d98 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff ff18 	bl	8004bce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01f      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d01b      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2c      	ldr	r2, [pc, #176]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d017      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d108      	bne.n	8004e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0f      	ldr	r2, [pc, #60]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 0201 	bic.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	; (8004fec <TIM_OC1_SetConfig+0x10c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00f      	beq.n	8004f60 <TIM_OC1_SetConfig+0x80>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a2b      	ldr	r2, [pc, #172]	; (8004ff0 <TIM_OC1_SetConfig+0x110>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_OC1_SetConfig+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ff4 <TIM_OC1_SetConfig+0x114>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <TIM_OC1_SetConfig+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a29      	ldr	r2, [pc, #164]	; (8004ff8 <TIM_OC1_SetConfig+0x118>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC1_SetConfig+0x80>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a28      	ldr	r2, [pc, #160]	; (8004ffc <TIM_OC1_SetConfig+0x11c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10c      	bne.n	8004f7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0308 	bic.w	r3, r3, #8
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <TIM_OC1_SetConfig+0x10c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_OC1_SetConfig+0xc2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <TIM_OC1_SetConfig+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_OC1_SetConfig+0xc2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <TIM_OC1_SetConfig+0x114>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_OC1_SetConfig+0xc2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <TIM_OC1_SetConfig+0x118>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC1_SetConfig+0xc2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <TIM_OC1_SetConfig+0x11c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800

08005000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0210 	bic.w	r2, r3, #16
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0320 	bic.w	r3, r3, #32
 800504e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a28      	ldr	r2, [pc, #160]	; (8005100 <TIM_OC2_SetConfig+0x100>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC2_SetConfig+0x6c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <TIM_OC2_SetConfig+0x104>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10d      	bne.n	8005088 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <TIM_OC2_SetConfig+0x100>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00f      	beq.n	80050b0 <TIM_OC2_SetConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <TIM_OC2_SetConfig+0x104>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_OC2_SetConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <TIM_OC2_SetConfig+0x108>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_OC2_SetConfig+0xb0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1a      	ldr	r2, [pc, #104]	; (800510c <TIM_OC2_SetConfig+0x10c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC2_SetConfig+0xb0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a19      	ldr	r2, [pc, #100]	; (8005110 <TIM_OC2_SetConfig+0x110>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d113      	bne.n	80050d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800

08005114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a27      	ldr	r2, [pc, #156]	; (8005210 <TIM_OC3_SetConfig+0xfc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC3_SetConfig+0x6a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a26      	ldr	r2, [pc, #152]	; (8005214 <TIM_OC3_SetConfig+0x100>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10d      	bne.n	800519a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <TIM_OC3_SetConfig+0xfc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <TIM_OC3_SetConfig+0xae>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <TIM_OC3_SetConfig+0x100>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <TIM_OC3_SetConfig+0xae>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1a      	ldr	r2, [pc, #104]	; (8005218 <TIM_OC3_SetConfig+0x104>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_OC3_SetConfig+0xae>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <TIM_OC3_SetConfig+0x108>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC3_SetConfig+0xae>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a18      	ldr	r2, [pc, #96]	; (8005220 <TIM_OC3_SetConfig+0x10c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d113      	bne.n	80051ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	621a      	str	r2, [r3, #32]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_OC4_SetConfig+0xc0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_OC4_SetConfig+0x84>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <TIM_OC4_SetConfig+0xc4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_OC4_SetConfig+0x84>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <TIM_OC4_SetConfig+0xc8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC4_SetConfig+0x84>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <TIM_OC4_SetConfig+0xcc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC4_SetConfig+0x84>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <TIM_OC4_SetConfig+0xd0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d109      	bne.n	80052bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800533c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a17      	ldr	r2, [pc, #92]	; (80053ac <TIM_OC5_SetConfig+0xb4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00f      	beq.n	8005372 <TIM_OC5_SetConfig+0x7a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <TIM_OC5_SetConfig+0xb8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00b      	beq.n	8005372 <TIM_OC5_SetConfig+0x7a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <TIM_OC5_SetConfig+0xbc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d007      	beq.n	8005372 <TIM_OC5_SetConfig+0x7a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <TIM_OC5_SetConfig+0xc0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_OC5_SetConfig+0x7a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a13      	ldr	r2, [pc, #76]	; (80053bc <TIM_OC5_SetConfig+0xc4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d109      	bne.n	8005386 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005378:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	621a      	str	r2, [r3, #32]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40012c00 	.word	0x40012c00
 80053b0:	40013400 	.word	0x40013400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800

080053c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	051b      	lsls	r3, r3, #20
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <TIM_OC6_SetConfig+0xb8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00f      	beq.n	800543c <TIM_OC6_SetConfig+0x7c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <TIM_OC6_SetConfig+0xbc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00b      	beq.n	800543c <TIM_OC6_SetConfig+0x7c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <TIM_OC6_SetConfig+0xc0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d007      	beq.n	800543c <TIM_OC6_SetConfig+0x7c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a15      	ldr	r2, [pc, #84]	; (8005484 <TIM_OC6_SetConfig+0xc4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_OC6_SetConfig+0x7c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a14      	ldr	r2, [pc, #80]	; (8005488 <TIM_OC6_SetConfig+0xc8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d109      	bne.n	8005450 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005442:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	029b      	lsls	r3, r3, #10
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800

0800548c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 030a 	bic.w	r3, r3, #10
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f023 0210 	bic.w	r2, r3, #16
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005526:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	f043 0307 	orr.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	2201      	movs	r2, #1
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	401a      	ands	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1a      	ldr	r2, [r3, #32]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005620:	2302      	movs	r3, #2
 8005622:	e068      	b.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800565e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005670:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01d      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005696:	d018      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1b      	ldr	r2, [pc, #108]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1a      	ldr	r2, [pc, #104]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00e      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d009      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d004      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a14      	ldr	r2, [pc, #80]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10c      	bne.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40014000 	.word	0x40014000

0800571c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005734:	2302      	movs	r3, #2
 8005736:	e065      	b.n	8005804 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d115      	bne.n	80057f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	051b      	lsls	r3, r3, #20
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40013400 	.word	0x40013400

08005818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e040      	b.n	80058e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb ff7e 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fec0 	bl	8006620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fc05 	bl	80060b0 <UART_SetConfig>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e01b      	b.n	80058e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 ff3f 	bl	8006764 <UART_CheckIdleState>
 80058e6:	4603      	mov	r3, r0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005904:	2b20      	cmp	r3, #32
 8005906:	d178      	bne.n	80059fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Transmit+0x24>
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e071      	b.n	80059fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2221      	movs	r2, #33	; 0x21
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005926:	f7fc f905 	bl	8001b34 <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005944:	d108      	bne.n	8005958 <HAL_UART_Transmit+0x68>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e003      	b.n	8005960 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005960:	e030      	b.n	80059c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 ffa1 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e03c      	b.n	80059fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005994:	b292      	uxth	r2, r2
 8005996:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	3302      	adds	r3, #2
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e008      	b.n	80059b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	b292      	uxth	r2, r2
 80059aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1c8      	bne.n	8005962 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	2140      	movs	r1, #64	; 0x40
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 ff6a 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d004      	beq.n	80059f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e005      	b.n	80059fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d137      	bne.n	8005a8c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Receive_IT+0x24>
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e030      	b.n	8005a8e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <HAL_UART_Receive_IT+0x94>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01f      	beq.n	8005a7c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d018      	beq.n	8005a7c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	613b      	str	r3, [r7, #16]
   return(result);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 ff7e 	bl	8006984 <UART_Start_Receive_IT>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	e000      	b.n	8005a8e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3728      	adds	r7, #40	; 0x28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40008000 	.word	0x40008000

08005a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b0ba      	sub	sp, #232	; 0xe8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ac6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005aca:	4013      	ands	r3, r2
 8005acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d115      	bne.n	8005b04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 82ae 	beq.w	8006056 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
      }
      return;
 8005b02:	e2a8      	b.n	8006056 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8117 	beq.w	8005d3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b1e:	4b85      	ldr	r3, [pc, #532]	; (8005d34 <HAL_UART_IRQHandler+0x298>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 810a 	beq.w	8005d3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d011      	beq.n	8005b58 <HAL_UART_IRQHandler+0xbc>
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d011      	beq.n	8005b88 <HAL_UART_IRQHandler+0xec>
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2202      	movs	r2, #2
 8005b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7e:	f043 0204 	orr.w	r2, r3, #4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d011      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x11c>
 8005b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bae:	f043 0202 	orr.w	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bea:	f043 0208 	orr.w	r2, r3, #8
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_UART_IRQHandler+0x18a>
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00c      	beq.n	8005c26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8214 	beq.w	800605a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b40      	cmp	r3, #64	; 0x40
 8005c70:	d005      	beq.n	8005c7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d04f      	beq.n	8005d1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 ff46 	bl	8006b10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d141      	bne.n	8005d16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1d9      	bne.n	8005c92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <HAL_UART_IRQHandler+0x29c>)
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fc f992 	bl	800201c <HAL_DMA_Abort_IT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d017      	beq.n	8005d2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	e00f      	b.n	8005d2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f9b8 	bl	8006084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	e00b      	b.n	8005d2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9b4 	bl	8006084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	e007      	b.n	8005d2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9b0 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d2c:	e195      	b.n	800605a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2e:	bf00      	nop
    return;
 8005d30:	e193      	b.n	800605a <HAL_UART_IRQHandler+0x5be>
 8005d32:	bf00      	nop
 8005d34:	04000120 	.word	0x04000120
 8005d38:	08006bd9 	.word	0x08006bd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 814e 	bne.w	8005fe2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8147 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8140 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2210      	movs	r2, #16
 8005d68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	f040 80b8 	bne.w	8005eea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8167 	beq.w	800605e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	f080 815f 	bcs.w	800605e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 8086 	bne.w	8005ec8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1da      	bne.n	8005dbc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e1      	bne.n	8005e06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e3      	bne.n	8005e42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005eac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e4      	bne.n	8005e88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fc f86c 	bl	8001fa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8d8 	bl	8006098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ee8:	e0b9      	b.n	800605e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80ab 	beq.w	8006062 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80a6 	beq.w	8006062 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e4      	bne.n	8005f16 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f70:	633a      	str	r2, [r7, #48]	; 0x30
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e3      	bne.n	8005f4c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 0310 	bic.w	r3, r3, #16
 8005fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	69b9      	ldr	r1, [r7, #24]
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e4      	bne.n	8005f98 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f85c 	bl	8006098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fe0:	e03f      	b.n	8006062 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <HAL_UART_IRQHandler+0x570>
 8005fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 ffe3 	bl	8006fd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800600a:	e02d      	b.n	8006068 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01c      	beq.n	8006066 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
    }
    return;
 8006034:	e017      	b.n	8006066 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d012      	beq.n	8006068 <HAL_UART_IRQHandler+0x5cc>
 8006042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fdd8 	bl	8006c04 <UART_EndTransmit_IT>
    return;
 8006054:	e008      	b.n	8006068 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006056:	bf00      	nop
 8006058:	e006      	b.n	8006068 <HAL_UART_IRQHandler+0x5cc>
    return;
 800605a:	bf00      	nop
 800605c:	e004      	b.n	8006068 <HAL_UART_IRQHandler+0x5cc>
      return;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006066:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006068:	37e8      	adds	r7, #232	; 0xe8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop

08006070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b4:	b08a      	sub	sp, #40	; 0x28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4ba4      	ldr	r3, [pc, #656]	; (8006370 <UART_SetConfig+0x2c0>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a99      	ldr	r2, [pc, #612]	; (8006374 <UART_SetConfig+0x2c4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006118:	4313      	orrs	r3, r2
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a90      	ldr	r2, [pc, #576]	; (8006378 <UART_SetConfig+0x2c8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d126      	bne.n	8006188 <UART_SetConfig+0xd8>
 800613a:	4b90      	ldr	r3, [pc, #576]	; (800637c <UART_SetConfig+0x2cc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d81b      	bhi.n	8006180 <UART_SetConfig+0xd0>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0xa0>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006161 	.word	0x08006161
 8006154:	08006171 	.word	0x08006171
 8006158:	08006169 	.word	0x08006169
 800615c:	08006179 	.word	0x08006179
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006166:	e116      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006168:	2302      	movs	r3, #2
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616e:	e112      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006176:	e10e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e10a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e106      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a7c      	ldr	r2, [pc, #496]	; (8006380 <UART_SetConfig+0x2d0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d138      	bne.n	8006204 <UART_SetConfig+0x154>
 8006192:	4b7a      	ldr	r3, [pc, #488]	; (800637c <UART_SetConfig+0x2cc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d82d      	bhi.n	80061fc <UART_SetConfig+0x14c>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0xf8>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080061fd 	.word	0x080061fd
 80061b0:	080061fd 	.word	0x080061fd
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061ed 	.word	0x080061ed
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061fd 	.word	0x080061fd
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e0d8      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e0d4      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e0d0      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e0cc      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e0c8      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5e      	ldr	r2, [pc, #376]	; (8006384 <UART_SetConfig+0x2d4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <UART_SetConfig+0x1aa>
 800620e:	4b5b      	ldr	r3, [pc, #364]	; (800637c <UART_SetConfig+0x2cc>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	d016      	beq.n	800624a <UART_SetConfig+0x19a>
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d818      	bhi.n	8006252 <UART_SetConfig+0x1a2>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d00a      	beq.n	800623a <UART_SetConfig+0x18a>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d814      	bhi.n	8006252 <UART_SetConfig+0x1a2>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <UART_SetConfig+0x182>
 800622c:	2b10      	cmp	r3, #16
 800622e:	d008      	beq.n	8006242 <UART_SetConfig+0x192>
 8006230:	e00f      	b.n	8006252 <UART_SetConfig+0x1a2>
 8006232:	2300      	movs	r3, #0
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006238:	e0ad      	b.n	8006396 <UART_SetConfig+0x2e6>
 800623a:	2302      	movs	r3, #2
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006240:	e0a9      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006242:	2304      	movs	r3, #4
 8006244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006248:	e0a5      	b.n	8006396 <UART_SetConfig+0x2e6>
 800624a:	2308      	movs	r3, #8
 800624c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006250:	e0a1      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006252:	2310      	movs	r3, #16
 8006254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006258:	e09d      	b.n	8006396 <UART_SetConfig+0x2e6>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a4a      	ldr	r2, [pc, #296]	; (8006388 <UART_SetConfig+0x2d8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x200>
 8006264:	4b45      	ldr	r3, [pc, #276]	; (800637c <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800626e:	2bc0      	cmp	r3, #192	; 0xc0
 8006270:	d016      	beq.n	80062a0 <UART_SetConfig+0x1f0>
 8006272:	2bc0      	cmp	r3, #192	; 0xc0
 8006274:	d818      	bhi.n	80062a8 <UART_SetConfig+0x1f8>
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d00a      	beq.n	8006290 <UART_SetConfig+0x1e0>
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d814      	bhi.n	80062a8 <UART_SetConfig+0x1f8>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <UART_SetConfig+0x1d8>
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d008      	beq.n	8006298 <UART_SetConfig+0x1e8>
 8006286:	e00f      	b.n	80062a8 <UART_SetConfig+0x1f8>
 8006288:	2300      	movs	r3, #0
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628e:	e082      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006290:	2302      	movs	r3, #2
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006296:	e07e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629e:	e07a      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a6:	e076      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ae:	e072      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a35      	ldr	r2, [pc, #212]	; (800638c <UART_SetConfig+0x2dc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d12a      	bne.n	8006310 <UART_SetConfig+0x260>
 80062ba:	4b30      	ldr	r3, [pc, #192]	; (800637c <UART_SetConfig+0x2cc>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d01a      	beq.n	8006300 <UART_SetConfig+0x250>
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d81b      	bhi.n	8006308 <UART_SetConfig+0x258>
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d00c      	beq.n	80062f0 <UART_SetConfig+0x240>
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062da:	d815      	bhi.n	8006308 <UART_SetConfig+0x258>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <UART_SetConfig+0x238>
 80062e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e4:	d008      	beq.n	80062f8 <UART_SetConfig+0x248>
 80062e6:	e00f      	b.n	8006308 <UART_SetConfig+0x258>
 80062e8:	2300      	movs	r3, #0
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ee:	e052      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062f0:	2302      	movs	r3, #2
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f6:	e04e      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fe:	e04a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006306:	e046      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630e:	e042      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a17      	ldr	r2, [pc, #92]	; (8006374 <UART_SetConfig+0x2c4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d13a      	bne.n	8006390 <UART_SetConfig+0x2e0>
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <UART_SetConfig+0x2cc>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006328:	d01a      	beq.n	8006360 <UART_SetConfig+0x2b0>
 800632a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800632e:	d81b      	bhi.n	8006368 <UART_SetConfig+0x2b8>
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d00c      	beq.n	8006350 <UART_SetConfig+0x2a0>
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633a:	d815      	bhi.n	8006368 <UART_SetConfig+0x2b8>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <UART_SetConfig+0x298>
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006344:	d008      	beq.n	8006358 <UART_SetConfig+0x2a8>
 8006346:	e00f      	b.n	8006368 <UART_SetConfig+0x2b8>
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634e:	e022      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006350:	2302      	movs	r3, #2
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006356:	e01e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635e:	e01a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006366:	e016      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	e012      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006370:	efff69f3 	.word	0xefff69f3
 8006374:	40008000 	.word	0x40008000
 8006378:	40013800 	.word	0x40013800
 800637c:	40021000 	.word	0x40021000
 8006380:	40004400 	.word	0x40004400
 8006384:	40004800 	.word	0x40004800
 8006388:	40004c00 	.word	0x40004c00
 800638c:	40005000 	.word	0x40005000
 8006390:	2310      	movs	r3, #16
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a9f      	ldr	r2, [pc, #636]	; (8006618 <UART_SetConfig+0x568>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d17a      	bne.n	8006496 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d824      	bhi.n	80063f2 <UART_SetConfig+0x342>
 80063a8:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x300>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063f3 	.word	0x080063f3
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063f3 	.word	0x080063f3
 80063c0:	080063e3 	.word	0x080063e3
 80063c4:	080063f3 	.word	0x080063f3
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	080063f3 	.word	0x080063f3
 80063d0:	080063eb 	.word	0x080063eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fc fedc 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80063d8:	61f8      	str	r0, [r7, #28]
        break;
 80063da:	e010      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063dc:	4b8f      	ldr	r3, [pc, #572]	; (800661c <UART_SetConfig+0x56c>)
 80063de:	61fb      	str	r3, [r7, #28]
        break;
 80063e0:	e00d      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e2:	f7fc fe3d 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80063e6:	61f8      	str	r0, [r7, #28]
        break;
 80063e8:	e009      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e005      	b.n	80063fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80fb 	beq.w	80065fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	429a      	cmp	r2, r3
 8006414:	d305      	bcc.n	8006422 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	429a      	cmp	r2, r3
 8006420:	d903      	bls.n	800642a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006428:	e0e8      	b.n	80065fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2200      	movs	r2, #0
 800642e:	461c      	mov	r4, r3
 8006430:	4615      	mov	r5, r2
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	022b      	lsls	r3, r5, #8
 800643c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006440:	0222      	lsls	r2, r4, #8
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6849      	ldr	r1, [r1, #4]
 8006446:	0849      	lsrs	r1, r1, #1
 8006448:	2000      	movs	r0, #0
 800644a:	4688      	mov	r8, r1
 800644c:	4681      	mov	r9, r0
 800644e:	eb12 0a08 	adds.w	sl, r2, r8
 8006452:	eb43 0b09 	adc.w	fp, r3, r9
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006464:	4650      	mov	r0, sl
 8006466:	4659      	mov	r1, fp
 8006468:	f7fa fb9c 	bl	8000ba4 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4613      	mov	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647a:	d308      	bcc.n	800648e <UART_SetConfig+0x3de>
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006482:	d204      	bcs.n	800648e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	e0b6      	b.n	80065fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006494:	e0b2      	b.n	80065fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649e:	d15e      	bne.n	800655e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d828      	bhi.n	80064fa <UART_SetConfig+0x44a>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x400>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fc fe5c 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80064d8:	61f8      	str	r0, [r7, #28]
        break;
 80064da:	e014      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fc fe6e 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 80064e0:	61f8      	str	r0, [r7, #28]
        break;
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b4d      	ldr	r3, [pc, #308]	; (800661c <UART_SetConfig+0x56c>)
 80064e6:	61fb      	str	r3, [r7, #28]
        break;
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fc fdb9 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80064ee:	61f8      	str	r0, [r7, #28]
        break;
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	61fb      	str	r3, [r7, #28]
        break;
 80064f8:	e005      	b.n	8006506 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d077      	beq.n	80065fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	005a      	lsls	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	441a      	add	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d916      	bls.n	8006556 <UART_SetConfig+0x4a6>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d212      	bcs.n	8006556 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f023 030f 	bic.w	r3, r3, #15
 8006538:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	b29b      	uxth	r3, r3
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	b29a      	uxth	r2, r3
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	4313      	orrs	r3, r2
 800654a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	8afa      	ldrh	r2, [r7, #22]
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	e052      	b.n	80065fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800655c:	e04e      	b.n	80065fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800655e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006562:	2b08      	cmp	r3, #8
 8006564:	d827      	bhi.n	80065b6 <UART_SetConfig+0x506>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x4bc>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	080065b7 	.word	0x080065b7
 800657c:	080065a7 	.word	0x080065a7
 8006580:	080065b7 	.word	0x080065b7
 8006584:	080065b7 	.word	0x080065b7
 8006588:	080065b7 	.word	0x080065b7
 800658c:	080065af 	.word	0x080065af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fc fdfe 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
        break;
 8006596:	e014      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006598:	f7fc fe10 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 800659c:	61f8      	str	r0, [r7, #28]
        break;
 800659e:	e010      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <UART_SetConfig+0x56c>)
 80065a2:	61fb      	str	r3, [r7, #28]
        break;
 80065a4:	e00d      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fc fd5b 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80065aa:	61f8      	str	r0, [r7, #28]
        break;
 80065ac:	e009      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b2:	61fb      	str	r3, [r7, #28]
        break;
 80065b4:	e005      	b.n	80065c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065c0:	bf00      	nop
    }

    if (pclk != 0U)
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d019      	beq.n	80065fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	085a      	lsrs	r2, r3, #1
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b0f      	cmp	r3, #15
 80065e0:	d909      	bls.n	80065f6 <UART_SetConfig+0x546>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e8:	d205      	bcs.n	80065f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e002      	b.n	80065fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006608:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	; 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006616:	bf00      	nop
 8006618:	40008000 	.word	0x40008000
 800661c:	00f42400 	.word	0x00f42400

08006620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01a      	beq.n	8006736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800671e:	d10a      	bne.n	8006736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b098      	sub	sp, #96	; 0x60
 8006768:	af02      	add	r7, sp, #8
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006774:	f7fb f9de 	bl	8001b34 <HAL_GetTick>
 8006778:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d12e      	bne.n	80067e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006790:	2200      	movs	r2, #0
 8006792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f88c 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d021      	beq.n	80067e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b6:	653b      	str	r3, [r7, #80]	; 0x50
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
 80067c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e062      	b.n	80068ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d149      	bne.n	8006888 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fc:	2200      	movs	r2, #0
 80067fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f856 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d03c      	beq.n	8006888 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	623b      	str	r3, [r7, #32]
   return(result);
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
 800682e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3308      	adds	r3, #8
 8006846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006860:	61fa      	str	r2, [r7, #28]
 8006862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	69b9      	ldr	r1, [r7, #24]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	617b      	str	r3, [r7, #20]
   return(result);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e011      	b.n	80068ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3758      	adds	r7, #88	; 0x58
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c4:	e049      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d045      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fb f931 	bl	8001b34 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e048      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d031      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b08      	cmp	r3, #8
 8006902:	d110      	bne.n	8006926 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2208      	movs	r2, #8
 800690a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f8ff 	bl	8006b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2208      	movs	r2, #8
 8006916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e029      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006934:	d111      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800693e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f8e5 	bl	8006b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e00f      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d0a6      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006984:	b480      	push	{r7}
 8006986:	b097      	sub	sp, #92	; 0x5c
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	88fa      	ldrh	r2, [r7, #6]
 800699c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b6:	d10e      	bne.n	80069d6 <UART_Start_Receive_IT+0x52>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <UART_Start_Receive_IT+0x48>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ca:	e02d      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d4:	e028      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10d      	bne.n	80069fa <UART_Start_Receive_IT+0x76>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <UART_Start_Receive_IT+0x6c>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ee:	e01b      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	227f      	movs	r2, #127	; 0x7f
 80069f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069f8:	e016      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a02:	d10d      	bne.n	8006a20 <UART_Start_Receive_IT+0x9c>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <UART_Start_Receive_IT+0x92>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	227f      	movs	r2, #127	; 0x7f
 8006a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a14:	e008      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	223f      	movs	r2, #63	; 0x3f
 8006a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a1e:	e003      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2222      	movs	r2, #34	; 0x22
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a58:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a74:	d107      	bne.n	8006a86 <UART_Start_Receive_IT+0x102>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <UART_Start_Receive_IT+0x184>)
 8006a82:	669a      	str	r2, [r3, #104]	; 0x68
 8006a84:	e002      	b.n	8006a8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4a20      	ldr	r2, [pc, #128]	; (8006b0c <UART_Start_Receive_IT+0x188>)
 8006a8a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d019      	beq.n	8006ac8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_Start_Receive_IT+0x110>
 8006ac6:	e018      	b.n	8006afa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f043 0320 	orr.w	r3, r3, #32
 8006adc:	653b      	str	r3, [r7, #80]	; 0x50
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae6:	623b      	str	r3, [r7, #32]
 8006ae8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	69f9      	ldr	r1, [r7, #28]
 8006aec:	6a3a      	ldr	r2, [r7, #32]
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e6      	bne.n	8006ac8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	375c      	adds	r7, #92	; 0x5c
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	08006e15 	.word	0x08006e15
 8006b0c:	08006c59 	.word	0x08006c59

08006b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b095      	sub	sp, #84	; 0x54
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b36:	643b      	str	r3, [r7, #64]	; 0x40
 8006b38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e6      	bne.n	8006b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3308      	adds	r3, #8
 8006b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e5      	bne.n	8006b4a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d118      	bne.n	8006bb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0310 	bic.w	r3, r3, #16
 8006b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6979      	ldr	r1, [r7, #20]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bcc:	bf00      	nop
 8006bce:	3754      	adds	r7, #84	; 0x54
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fa44 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6979      	ldr	r1, [r7, #20]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	613b      	str	r3, [r7, #16]
   return(result);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fa10 	bl	8006070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c50:	bf00      	nop
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b09c      	sub	sp, #112	; 0x70
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c70:	2b22      	cmp	r3, #34	; 0x22
 8006c72:	f040 80be 	bne.w	8006df2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c84:	b2d9      	uxtb	r1, r3
 8006c86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	400a      	ands	r2, r1
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f040 80a3 	bne.w	8006e06 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e6      	bne.n	8006cc0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	667b      	str	r3, [r7, #100]	; 0x64
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d12:	647a      	str	r2, [r7, #68]	; 0x44
 8006d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e5      	bne.n	8006cf2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a34      	ldr	r2, [pc, #208]	; (8006e10 <UART_RxISR_8BIT+0x1b8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d01f      	beq.n	8006d84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d018      	beq.n	8006d84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d66:	663b      	str	r3, [r7, #96]	; 0x60
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 8006d72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e6      	bne.n	8006d52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d12e      	bne.n	8006dea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0310 	bic.w	r3, r3, #16
 8006da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	69b9      	ldr	r1, [r7, #24]
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e6      	bne.n	8006d92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d103      	bne.n	8006dda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff f958 	bl	8006098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006de8:	e00d      	b.n	8006e06 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fa fb42 	bl	8001474 <HAL_UART_RxCpltCallback>
}
 8006df0:	e009      	b.n	8006e06 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	8b1b      	ldrh	r3, [r3, #24]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0208 	orr.w	r2, r2, #8
 8006e02:	b292      	uxth	r2, r2
 8006e04:	831a      	strh	r2, [r3, #24]
}
 8006e06:	bf00      	nop
 8006e08:	3770      	adds	r7, #112	; 0x70
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40008000 	.word	0x40008000

08006e14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b09c      	sub	sp, #112	; 0x70
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2c:	2b22      	cmp	r3, #34	; 0x22
 8006e2e:	f040 80be 	bne.w	8006fae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006e46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 80a3 	bne.w	8006fc2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e90:	667b      	str	r3, [r7, #100]	; 0x64
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e6      	bne.n	8006e7c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ece:	643a      	str	r2, [r7, #64]	; 0x40
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ed4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e5      	bne.n	8006eae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a34      	ldr	r2, [pc, #208]	; (8006fcc <UART_RxISR_16BIT+0x1b8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d01f      	beq.n	8006f40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d018      	beq.n	8006f40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e6      	bne.n	8006f0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d12e      	bne.n	8006fa6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f023 0310 	bic.w	r3, r3, #16
 8006f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6979      	ldr	r1, [r7, #20]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d103      	bne.n	8006f96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2210      	movs	r2, #16
 8006f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff f87a 	bl	8006098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fa4:	e00d      	b.n	8006fc2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fa fa64 	bl	8001474 <HAL_UART_RxCpltCallback>
}
 8006fac:	e009      	b.n	8006fc2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	8b1b      	ldrh	r3, [r3, #24]
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0208 	orr.w	r2, r2, #8
 8006fbe:	b292      	uxth	r2, r2
 8006fc0:	831a      	strh	r2, [r3, #24]
}
 8006fc2:	bf00      	nop
 8006fc4:	3770      	adds	r7, #112	; 0x70
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40008000 	.word	0x40008000

08006fd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <uart_init>:
uint8_t tx_buffer_uart5[MSG_SIZE_UART5];
uint8_t checksum = 0;
uint8_t msg_size = 0;
uint8_t msg_size_reception = 0;

void uart_init(UART_HandleTypeDef * uart){
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	memset(rx_buffer_uart2, 0, MSG_SIZE_UART2);
 8006fec:	220c      	movs	r2, #12
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4815      	ldr	r0, [pc, #84]	; (8007048 <uart_init+0x64>)
 8006ff2:	f000 fe15 	bl	8007c20 <memset>
	memset(tx_buffer_uart2, 0, MSG_SIZE_UART2);
 8006ff6:	220c      	movs	r2, #12
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4814      	ldr	r0, [pc, #80]	; (800704c <uart_init+0x68>)
 8006ffc:	f000 fe10 	bl	8007c20 <memset>
	memset(rx_buffer_uart5, 0, MSG_SIZE_UART5);
 8007000:	220c      	movs	r2, #12
 8007002:	2100      	movs	r1, #0
 8007004:	4812      	ldr	r0, [pc, #72]	; (8007050 <uart_init+0x6c>)
 8007006:	f000 fe0b 	bl	8007c20 <memset>
	memset(tx_buffer_uart5, 0, MSG_SIZE_UART5);
 800700a:	220c      	movs	r2, #12
 800700c:	2100      	movs	r1, #0
 800700e:	4811      	ldr	r0, [pc, #68]	; (8007054 <uart_init+0x70>)
 8007010:	f000 fe06 	bl	8007c20 <memset>

	__HAL_UART_DISABLE(uart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE(uart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(uart, rx_buffer_uart2, MSG_SIZE_UART2);//START_IT UART2
 8007034:	220c      	movs	r2, #12
 8007036:	4904      	ldr	r1, [pc, #16]	; (8007048 <uart_init+0x64>)
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fe fce3 	bl	8005a04 <HAL_UART_Receive_IT>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200002dc 	.word	0x200002dc
 800704c:	200002e8 	.word	0x200002e8
 8007050:	200002f4 	.word	0x200002f4
 8007054:	20000300 	.word	0x20000300

08007058 <reception>:

void reception(UART_HandleTypeDef * uart){
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(uart,  UART_IT_RXNE);  // Disable UART2 RX interrupt
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0220 	bic.w	r2, r2, #32
 800706e:	601a      	str	r2, [r3, #0]
	parser();
 8007070:	f000 f818 	bl	80070a4 <parser>
	memset(rx_buffer_uart2, 0, MSG_SIZE_UART2);
 8007074:	220c      	movs	r2, #12
 8007076:	2100      	movs	r1, #0
 8007078:	4809      	ldr	r0, [pc, #36]	; (80070a0 <reception+0x48>)
 800707a:	f000 fdd1 	bl	8007c20 <memset>
	__HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);  // Enable UAR2T RX interrupt
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0220 	orr.w	r2, r2, #32
 800708c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(uart, rx_buffer_uart2, MSG_SIZE_UART2);
 800708e:	220c      	movs	r2, #12
 8007090:	4903      	ldr	r1, [pc, #12]	; (80070a0 <reception+0x48>)
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fe fcb6 	bl	8005a04 <HAL_UART_Receive_IT>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	200002dc 	.word	0x200002dc

080070a4 <parser>:

void parser()
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
	if(check_msg_identifier())
 80070aa:	f000 fbd1 	bl	8007850 <check_msg_identifier>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 838a 	beq.w	80077ca <parser+0x726>
	{
		if (robot_uid()){
 80070b6:	f000 fbe3 	bl	8007880 <robot_uid>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8384 	beq.w	80077ca <parser+0x726>
			if(check_checksum_rx()){
 80070c2:	f000 fc4b 	bl	800795c <check_checksum_rx>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 837e 	beq.w	80077ca <parser+0x726>
				uint8_t actionneur = rx_buffer_uart2[POS_ACT];
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <parser+0x50>)
 80070d0:	78db      	ldrb	r3, [r3, #3]
 80070d2:	71fb      	strb	r3, [r7, #7]
				uint8_t msg_type = rx_buffer_uart2[POS_MSG_TYPE];
 80070d4:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <parser+0x50>)
 80070d6:	791b      	ldrb	r3, [r3, #4]
 80070d8:	71bb      	strb	r3, [r7, #6]
				switch (actionneur){
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	f000 8371 	beq.w	80077c4 <parser+0x720>
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	f300 8370 	bgt.w	80077c8 <parser+0x724>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <parser+0x54>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	f000 8351 	beq.w	8007794 <parser+0x6f0>
					break;

					case SCREEN :
						break;
					default:
						break;
 80070f2:	e369      	b.n	80077c8 <parser+0x724>
 80070f4:	200002dc 	.word	0x200002dc
						switch (msg_type){
 80070f8:	79bb      	ldrb	r3, [r7, #6]
 80070fa:	2bff      	cmp	r3, #255	; 0xff
 80070fc:	f200 831c 	bhi.w	8007738 <parser+0x694>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <parser+0x64>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	08007739 	.word	0x08007739
 800710c:	08007739 	.word	0x08007739
 8007110:	08007739 	.word	0x08007739
 8007114:	08007739 	.word	0x08007739
 8007118:	08007739 	.word	0x08007739
 800711c:	08007739 	.word	0x08007739
 8007120:	08007739 	.word	0x08007739
 8007124:	08007739 	.word	0x08007739
 8007128:	08007739 	.word	0x08007739
 800712c:	08007739 	.word	0x08007739
 8007130:	08007739 	.word	0x08007739
 8007134:	08007739 	.word	0x08007739
 8007138:	08007739 	.word	0x08007739
 800713c:	08007739 	.word	0x08007739
 8007140:	08007739 	.word	0x08007739
 8007144:	08007739 	.word	0x08007739
 8007148:	08007739 	.word	0x08007739
 800714c:	08007739 	.word	0x08007739
 8007150:	08007739 	.word	0x08007739
 8007154:	08007739 	.word	0x08007739
 8007158:	08007739 	.word	0x08007739
 800715c:	08007739 	.word	0x08007739
 8007160:	08007739 	.word	0x08007739
 8007164:	08007739 	.word	0x08007739
 8007168:	08007739 	.word	0x08007739
 800716c:	08007739 	.word	0x08007739
 8007170:	08007739 	.word	0x08007739
 8007174:	08007739 	.word	0x08007739
 8007178:	08007739 	.word	0x08007739
 800717c:	08007739 	.word	0x08007739
 8007180:	08007739 	.word	0x08007739
 8007184:	08007739 	.word	0x08007739
 8007188:	08007739 	.word	0x08007739
 800718c:	08007739 	.word	0x08007739
 8007190:	08007739 	.word	0x08007739
 8007194:	08007739 	.word	0x08007739
 8007198:	08007739 	.word	0x08007739
 800719c:	08007739 	.word	0x08007739
 80071a0:	08007739 	.word	0x08007739
 80071a4:	08007739 	.word	0x08007739
 80071a8:	08007739 	.word	0x08007739
 80071ac:	08007739 	.word	0x08007739
 80071b0:	08007739 	.word	0x08007739
 80071b4:	08007739 	.word	0x08007739
 80071b8:	08007739 	.word	0x08007739
 80071bc:	08007739 	.word	0x08007739
 80071c0:	08007739 	.word	0x08007739
 80071c4:	08007739 	.word	0x08007739
 80071c8:	08007509 	.word	0x08007509
 80071cc:	08007739 	.word	0x08007739
 80071d0:	08007739 	.word	0x08007739
 80071d4:	08007517 	.word	0x08007517
 80071d8:	08007739 	.word	0x08007739
 80071dc:	08007739 	.word	0x08007739
 80071e0:	08007739 	.word	0x08007739
 80071e4:	08007739 	.word	0x08007739
 80071e8:	08007739 	.word	0x08007739
 80071ec:	0800751f 	.word	0x0800751f
 80071f0:	08007527 	.word	0x08007527
 80071f4:	08007739 	.word	0x08007739
 80071f8:	08007739 	.word	0x08007739
 80071fc:	0800752f 	.word	0x0800752f
 8007200:	08007537 	.word	0x08007537
 8007204:	080075fd 	.word	0x080075fd
 8007208:	08007739 	.word	0x08007739
 800720c:	08007739 	.word	0x08007739
 8007210:	08007739 	.word	0x08007739
 8007214:	08007739 	.word	0x08007739
 8007218:	08007739 	.word	0x08007739
 800721c:	08007739 	.word	0x08007739
 8007220:	08007739 	.word	0x08007739
 8007224:	08007739 	.word	0x08007739
 8007228:	08007739 	.word	0x08007739
 800722c:	08007739 	.word	0x08007739
 8007230:	08007739 	.word	0x08007739
 8007234:	08007739 	.word	0x08007739
 8007238:	08007739 	.word	0x08007739
 800723c:	08007739 	.word	0x08007739
 8007240:	08007739 	.word	0x08007739
 8007244:	08007739 	.word	0x08007739
 8007248:	08007739 	.word	0x08007739
 800724c:	08007739 	.word	0x08007739
 8007250:	08007739 	.word	0x08007739
 8007254:	08007739 	.word	0x08007739
 8007258:	08007739 	.word	0x08007739
 800725c:	08007739 	.word	0x08007739
 8007260:	08007739 	.word	0x08007739
 8007264:	08007739 	.word	0x08007739
 8007268:	08007739 	.word	0x08007739
 800726c:	08007739 	.word	0x08007739
 8007270:	08007739 	.word	0x08007739
 8007274:	08007739 	.word	0x08007739
 8007278:	08007739 	.word	0x08007739
 800727c:	08007739 	.word	0x08007739
 8007280:	08007739 	.word	0x08007739
 8007284:	08007739 	.word	0x08007739
 8007288:	08007739 	.word	0x08007739
 800728c:	08007739 	.word	0x08007739
 8007290:	08007739 	.word	0x08007739
 8007294:	08007739 	.word	0x08007739
 8007298:	08007739 	.word	0x08007739
 800729c:	08007739 	.word	0x08007739
 80072a0:	08007739 	.word	0x08007739
 80072a4:	08007739 	.word	0x08007739
 80072a8:	08007739 	.word	0x08007739
 80072ac:	08007739 	.word	0x08007739
 80072b0:	08007739 	.word	0x08007739
 80072b4:	08007739 	.word	0x08007739
 80072b8:	08007739 	.word	0x08007739
 80072bc:	08007739 	.word	0x08007739
 80072c0:	08007739 	.word	0x08007739
 80072c4:	08007739 	.word	0x08007739
 80072c8:	08007739 	.word	0x08007739
 80072cc:	08007739 	.word	0x08007739
 80072d0:	08007739 	.word	0x08007739
 80072d4:	08007739 	.word	0x08007739
 80072d8:	08007739 	.word	0x08007739
 80072dc:	08007739 	.word	0x08007739
 80072e0:	08007739 	.word	0x08007739
 80072e4:	08007739 	.word	0x08007739
 80072e8:	08007739 	.word	0x08007739
 80072ec:	08007739 	.word	0x08007739
 80072f0:	08007739 	.word	0x08007739
 80072f4:	08007739 	.word	0x08007739
 80072f8:	08007739 	.word	0x08007739
 80072fc:	08007739 	.word	0x08007739
 8007300:	08007739 	.word	0x08007739
 8007304:	08007739 	.word	0x08007739
 8007308:	0800753f 	.word	0x0800753f
 800730c:	0800754d 	.word	0x0800754d
 8007310:	0800755d 	.word	0x0800755d
 8007314:	0800756d 	.word	0x0800756d
 8007318:	0800757d 	.word	0x0800757d
 800731c:	0800758d 	.word	0x0800758d
 8007320:	0800759d 	.word	0x0800759d
 8007324:	080075ad 	.word	0x080075ad
 8007328:	080075bd 	.word	0x080075bd
 800732c:	080075cd 	.word	0x080075cd
 8007330:	080075dd 	.word	0x080075dd
 8007334:	080075ed 	.word	0x080075ed
 8007338:	08007739 	.word	0x08007739
 800733c:	08007739 	.word	0x08007739
 8007340:	08007739 	.word	0x08007739
 8007344:	08007739 	.word	0x08007739
 8007348:	08007605 	.word	0x08007605
 800734c:	08007615 	.word	0x08007615
 8007350:	08007623 	.word	0x08007623
 8007354:	08007633 	.word	0x08007633
 8007358:	08007643 	.word	0x08007643
 800735c:	08007739 	.word	0x08007739
 8007360:	08007739 	.word	0x08007739
 8007364:	08007739 	.word	0x08007739
 8007368:	08007739 	.word	0x08007739
 800736c:	08007739 	.word	0x08007739
 8007370:	08007739 	.word	0x08007739
 8007374:	08007739 	.word	0x08007739
 8007378:	08007739 	.word	0x08007739
 800737c:	08007739 	.word	0x08007739
 8007380:	08007739 	.word	0x08007739
 8007384:	08007739 	.word	0x08007739
 8007388:	08007739 	.word	0x08007739
 800738c:	08007651 	.word	0x08007651
 8007390:	08007669 	.word	0x08007669
 8007394:	08007681 	.word	0x08007681
 8007398:	08007699 	.word	0x08007699
 800739c:	080076b1 	.word	0x080076b1
 80073a0:	08007739 	.word	0x08007739
 80073a4:	08007739 	.word	0x08007739
 80073a8:	08007739 	.word	0x08007739
 80073ac:	08007739 	.word	0x08007739
 80073b0:	08007739 	.word	0x08007739
 80073b4:	08007739 	.word	0x08007739
 80073b8:	08007739 	.word	0x08007739
 80073bc:	08007739 	.word	0x08007739
 80073c0:	08007739 	.word	0x08007739
 80073c4:	08007739 	.word	0x08007739
 80073c8:	08007739 	.word	0x08007739
 80073cc:	08007739 	.word	0x08007739
 80073d0:	08007739 	.word	0x08007739
 80073d4:	08007739 	.word	0x08007739
 80073d8:	08007739 	.word	0x08007739
 80073dc:	08007739 	.word	0x08007739
 80073e0:	08007739 	.word	0x08007739
 80073e4:	08007739 	.word	0x08007739
 80073e8:	08007739 	.word	0x08007739
 80073ec:	08007739 	.word	0x08007739
 80073f0:	08007739 	.word	0x08007739
 80073f4:	08007739 	.word	0x08007739
 80073f8:	08007739 	.word	0x08007739
 80073fc:	08007739 	.word	0x08007739
 8007400:	08007739 	.word	0x08007739
 8007404:	08007739 	.word	0x08007739
 8007408:	08007739 	.word	0x08007739
 800740c:	08007739 	.word	0x08007739
 8007410:	08007739 	.word	0x08007739
 8007414:	08007739 	.word	0x08007739
 8007418:	08007739 	.word	0x08007739
 800741c:	08007739 	.word	0x08007739
 8007420:	08007739 	.word	0x08007739
 8007424:	08007739 	.word	0x08007739
 8007428:	08007739 	.word	0x08007739
 800742c:	08007739 	.word	0x08007739
 8007430:	08007739 	.word	0x08007739
 8007434:	08007739 	.word	0x08007739
 8007438:	08007739 	.word	0x08007739
 800743c:	08007739 	.word	0x08007739
 8007440:	08007739 	.word	0x08007739
 8007444:	08007739 	.word	0x08007739
 8007448:	08007739 	.word	0x08007739
 800744c:	08007739 	.word	0x08007739
 8007450:	08007739 	.word	0x08007739
 8007454:	08007739 	.word	0x08007739
 8007458:	08007739 	.word	0x08007739
 800745c:	08007739 	.word	0x08007739
 8007460:	08007739 	.word	0x08007739
 8007464:	08007739 	.word	0x08007739
 8007468:	08007739 	.word	0x08007739
 800746c:	08007739 	.word	0x08007739
 8007470:	08007739 	.word	0x08007739
 8007474:	08007739 	.word	0x08007739
 8007478:	08007739 	.word	0x08007739
 800747c:	08007739 	.word	0x08007739
 8007480:	08007739 	.word	0x08007739
 8007484:	08007739 	.word	0x08007739
 8007488:	08007739 	.word	0x08007739
 800748c:	08007739 	.word	0x08007739
 8007490:	08007739 	.word	0x08007739
 8007494:	08007739 	.word	0x08007739
 8007498:	08007739 	.word	0x08007739
 800749c:	08007739 	.word	0x08007739
 80074a0:	08007739 	.word	0x08007739
 80074a4:	08007739 	.word	0x08007739
 80074a8:	08007739 	.word	0x08007739
 80074ac:	08007739 	.word	0x08007739
 80074b0:	08007739 	.word	0x08007739
 80074b4:	08007739 	.word	0x08007739
 80074b8:	08007739 	.word	0x08007739
 80074bc:	08007739 	.word	0x08007739
 80074c0:	08007739 	.word	0x08007739
 80074c4:	08007739 	.word	0x08007739
 80074c8:	08007739 	.word	0x08007739
 80074cc:	08007739 	.word	0x08007739
 80074d0:	08007739 	.word	0x08007739
 80074d4:	080076c9 	.word	0x080076c9
 80074d8:	08007739 	.word	0x08007739
 80074dc:	08007739 	.word	0x08007739
 80074e0:	080076d9 	.word	0x080076d9
 80074e4:	080076f1 	.word	0x080076f1
 80074e8:	08007739 	.word	0x08007739
 80074ec:	08007739 	.word	0x08007739
 80074f0:	08007739 	.word	0x08007739
 80074f4:	08007739 	.word	0x08007739
 80074f8:	08007739 	.word	0x08007739
 80074fc:	08007709 	.word	0x08007709
 8007500:	08007739 	.word	0x08007739
 8007504:	080076f9 	.word	0x080076f9
								msg_size = 3;
 8007508:	4b9d      	ldr	r3, [pc, #628]	; (8007780 <parser+0x6dc>)
 800750a:	2203      	movs	r2, #3
 800750c:	701a      	strb	r2, [r3, #0]
								msg_size_reception = 8 ;
 800750e:	4b9d      	ldr	r3, [pc, #628]	; (8007784 <parser+0x6e0>)
 8007510:	2208      	movs	r2, #8
 8007512:	701a      	strb	r2, [r3, #0]
								break;
 8007514:	e111      	b.n	800773a <parser+0x696>
								msg_size = 3;
 8007516:	4b9a      	ldr	r3, [pc, #616]	; (8007780 <parser+0x6dc>)
 8007518:	2203      	movs	r2, #3
 800751a:	701a      	strb	r2, [r3, #0]
								break;
 800751c:	e10d      	b.n	800773a <parser+0x696>
								msg_size = 3;
 800751e:	4b98      	ldr	r3, [pc, #608]	; (8007780 <parser+0x6dc>)
 8007520:	2203      	movs	r2, #3
 8007522:	701a      	strb	r2, [r3, #0]
								break;
 8007524:	e109      	b.n	800773a <parser+0x696>
								msg_size = 3;
 8007526:	4b96      	ldr	r3, [pc, #600]	; (8007780 <parser+0x6dc>)
 8007528:	2203      	movs	r2, #3
 800752a:	701a      	strb	r2, [r3, #0]
								break;
 800752c:	e105      	b.n	800773a <parser+0x696>
								msg_size = 3;
 800752e:	4b94      	ldr	r3, [pc, #592]	; (8007780 <parser+0x6dc>)
 8007530:	2203      	movs	r2, #3
 8007532:	701a      	strb	r2, [r3, #0]
								break;
 8007534:	e101      	b.n	800773a <parser+0x696>
								msg_size = 3;
 8007536:	4b92      	ldr	r3, [pc, #584]	; (8007780 <parser+0x6dc>)
 8007538:	2203      	movs	r2, #3
 800753a:	701a      	strb	r2, [r3, #0]
								break;
 800753c:	e0fd      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800753e:	4b90      	ldr	r3, [pc, #576]	; (8007780 <parser+0x6dc>)
 8007540:	2204      	movs	r2, #4
 8007542:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = 0x00;
 8007544:	4b90      	ldr	r3, [pc, #576]	; (8007788 <parser+0x6e4>)
 8007546:	2200      	movs	r2, #0
 8007548:	709a      	strb	r2, [r3, #2]
								break;
 800754a:	e0f6      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800754c:	4b8c      	ldr	r3, [pc, #560]	; (8007780 <parser+0x6dc>)
 800754e:	2204      	movs	r2, #4
 8007550:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007552:	4b8e      	ldr	r3, [pc, #568]	; (800778c <parser+0x6e8>)
 8007554:	799a      	ldrb	r2, [r3, #6]
 8007556:	4b8c      	ldr	r3, [pc, #560]	; (8007788 <parser+0x6e4>)
 8007558:	709a      	strb	r2, [r3, #2]
								break;
 800755a:	e0ee      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800755c:	4b88      	ldr	r3, [pc, #544]	; (8007780 <parser+0x6dc>)
 800755e:	2204      	movs	r2, #4
 8007560:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007562:	4b8a      	ldr	r3, [pc, #552]	; (800778c <parser+0x6e8>)
 8007564:	799a      	ldrb	r2, [r3, #6]
 8007566:	4b88      	ldr	r3, [pc, #544]	; (8007788 <parser+0x6e4>)
 8007568:	709a      	strb	r2, [r3, #2]
								break;
 800756a:	e0e6      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800756c:	4b84      	ldr	r3, [pc, #528]	; (8007780 <parser+0x6dc>)
 800756e:	2204      	movs	r2, #4
 8007570:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007572:	4b86      	ldr	r3, [pc, #536]	; (800778c <parser+0x6e8>)
 8007574:	799a      	ldrb	r2, [r3, #6]
 8007576:	4b84      	ldr	r3, [pc, #528]	; (8007788 <parser+0x6e4>)
 8007578:	709a      	strb	r2, [r3, #2]
								break;
 800757a:	e0de      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800757c:	4b80      	ldr	r3, [pc, #512]	; (8007780 <parser+0x6dc>)
 800757e:	2204      	movs	r2, #4
 8007580:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007582:	4b82      	ldr	r3, [pc, #520]	; (800778c <parser+0x6e8>)
 8007584:	799a      	ldrb	r2, [r3, #6]
 8007586:	4b80      	ldr	r3, [pc, #512]	; (8007788 <parser+0x6e4>)
 8007588:	709a      	strb	r2, [r3, #2]
								break;
 800758a:	e0d6      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800758c:	4b7c      	ldr	r3, [pc, #496]	; (8007780 <parser+0x6dc>)
 800758e:	2204      	movs	r2, #4
 8007590:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007592:	4b7e      	ldr	r3, [pc, #504]	; (800778c <parser+0x6e8>)
 8007594:	799a      	ldrb	r2, [r3, #6]
 8007596:	4b7c      	ldr	r3, [pc, #496]	; (8007788 <parser+0x6e4>)
 8007598:	709a      	strb	r2, [r3, #2]
								break;
 800759a:	e0ce      	b.n	800773a <parser+0x696>
								msg_size = 4;
 800759c:	4b78      	ldr	r3, [pc, #480]	; (8007780 <parser+0x6dc>)
 800759e:	2204      	movs	r2, #4
 80075a0:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80075a2:	4b7a      	ldr	r3, [pc, #488]	; (800778c <parser+0x6e8>)
 80075a4:	799a      	ldrb	r2, [r3, #6]
 80075a6:	4b78      	ldr	r3, [pc, #480]	; (8007788 <parser+0x6e4>)
 80075a8:	709a      	strb	r2, [r3, #2]
								break;
 80075aa:	e0c6      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80075ac:	4b74      	ldr	r3, [pc, #464]	; (8007780 <parser+0x6dc>)
 80075ae:	2204      	movs	r2, #4
 80075b0:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80075b2:	4b76      	ldr	r3, [pc, #472]	; (800778c <parser+0x6e8>)
 80075b4:	799a      	ldrb	r2, [r3, #6]
 80075b6:	4b74      	ldr	r3, [pc, #464]	; (8007788 <parser+0x6e4>)
 80075b8:	709a      	strb	r2, [r3, #2]
								break;
 80075ba:	e0be      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80075bc:	4b70      	ldr	r3, [pc, #448]	; (8007780 <parser+0x6dc>)
 80075be:	2204      	movs	r2, #4
 80075c0:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80075c2:	4b72      	ldr	r3, [pc, #456]	; (800778c <parser+0x6e8>)
 80075c4:	799a      	ldrb	r2, [r3, #6]
 80075c6:	4b70      	ldr	r3, [pc, #448]	; (8007788 <parser+0x6e4>)
 80075c8:	709a      	strb	r2, [r3, #2]
								break;
 80075ca:	e0b6      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80075cc:	4b6c      	ldr	r3, [pc, #432]	; (8007780 <parser+0x6dc>)
 80075ce:	2204      	movs	r2, #4
 80075d0:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80075d2:	4b6e      	ldr	r3, [pc, #440]	; (800778c <parser+0x6e8>)
 80075d4:	799a      	ldrb	r2, [r3, #6]
 80075d6:	4b6c      	ldr	r3, [pc, #432]	; (8007788 <parser+0x6e4>)
 80075d8:	709a      	strb	r2, [r3, #2]
								break;
 80075da:	e0ae      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80075dc:	4b68      	ldr	r3, [pc, #416]	; (8007780 <parser+0x6dc>)
 80075de:	2204      	movs	r2, #4
 80075e0:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80075e2:	4b6a      	ldr	r3, [pc, #424]	; (800778c <parser+0x6e8>)
 80075e4:	799a      	ldrb	r2, [r3, #6]
 80075e6:	4b68      	ldr	r3, [pc, #416]	; (8007788 <parser+0x6e4>)
 80075e8:	709a      	strb	r2, [r3, #2]
								break;
 80075ea:	e0a6      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80075ec:	4b64      	ldr	r3, [pc, #400]	; (8007780 <parser+0x6dc>)
 80075ee:	2204      	movs	r2, #4
 80075f0:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80075f2:	4b66      	ldr	r3, [pc, #408]	; (800778c <parser+0x6e8>)
 80075f4:	799a      	ldrb	r2, [r3, #6]
 80075f6:	4b64      	ldr	r3, [pc, #400]	; (8007788 <parser+0x6e4>)
 80075f8:	709a      	strb	r2, [r3, #2]
								break;
 80075fa:	e09e      	b.n	800773a <parser+0x696>
								msg_size = 3;
 80075fc:	4b60      	ldr	r3, [pc, #384]	; (8007780 <parser+0x6dc>)
 80075fe:	2203      	movs	r2, #3
 8007600:	701a      	strb	r2, [r3, #0]
								break;
 8007602:	e09a      	b.n	800773a <parser+0x696>
								msg_size = 4;
 8007604:	4b5e      	ldr	r3, [pc, #376]	; (8007780 <parser+0x6dc>)
 8007606:	2204      	movs	r2, #4
 8007608:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 800760a:	4b60      	ldr	r3, [pc, #384]	; (800778c <parser+0x6e8>)
 800760c:	799a      	ldrb	r2, [r3, #6]
 800760e:	4b5e      	ldr	r3, [pc, #376]	; (8007788 <parser+0x6e4>)
 8007610:	709a      	strb	r2, [r3, #2]
								break;
 8007612:	e092      	b.n	800773a <parser+0x696>
								msg_size = 4;
 8007614:	4b5a      	ldr	r3, [pc, #360]	; (8007780 <parser+0x6dc>)
 8007616:	2204      	movs	r2, #4
 8007618:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = 0x00;
 800761a:	4b5b      	ldr	r3, [pc, #364]	; (8007788 <parser+0x6e4>)
 800761c:	2200      	movs	r2, #0
 800761e:	709a      	strb	r2, [r3, #2]
								break;
 8007620:	e08b      	b.n	800773a <parser+0x696>
								msg_size = 4;
 8007622:	4b57      	ldr	r3, [pc, #348]	; (8007780 <parser+0x6dc>)
 8007624:	2204      	movs	r2, #4
 8007626:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007628:	4b58      	ldr	r3, [pc, #352]	; (800778c <parser+0x6e8>)
 800762a:	799a      	ldrb	r2, [r3, #6]
 800762c:	4b56      	ldr	r3, [pc, #344]	; (8007788 <parser+0x6e4>)
 800762e:	709a      	strb	r2, [r3, #2]
								break;
 8007630:	e083      	b.n	800773a <parser+0x696>
								msg_size = 4;
 8007632:	4b53      	ldr	r3, [pc, #332]	; (8007780 <parser+0x6dc>)
 8007634:	2204      	movs	r2, #4
 8007636:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007638:	4b54      	ldr	r3, [pc, #336]	; (800778c <parser+0x6e8>)
 800763a:	799a      	ldrb	r2, [r3, #6]
 800763c:	4b52      	ldr	r3, [pc, #328]	; (8007788 <parser+0x6e4>)
 800763e:	709a      	strb	r2, [r3, #2]
								break;
 8007640:	e07b      	b.n	800773a <parser+0x696>
								msg_size = 4;
 8007642:	4b4f      	ldr	r3, [pc, #316]	; (8007780 <parser+0x6dc>)
 8007644:	2204      	movs	r2, #4
 8007646:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = 0x00;
 8007648:	4b4f      	ldr	r3, [pc, #316]	; (8007788 <parser+0x6e4>)
 800764a:	2200      	movs	r2, #0
 800764c:	709a      	strb	r2, [r3, #2]
								break;
 800764e:	e074      	b.n	800773a <parser+0x696>
								msg_size = 5;
 8007650:	4b4b      	ldr	r3, [pc, #300]	; (8007780 <parser+0x6dc>)
 8007652:	2205      	movs	r2, #5
 8007654:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007656:	4b4d      	ldr	r3, [pc, #308]	; (800778c <parser+0x6e8>)
 8007658:	799a      	ldrb	r2, [r3, #6]
 800765a:	4b4b      	ldr	r3, [pc, #300]	; (8007788 <parser+0x6e4>)
 800765c:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 800765e:	4b4b      	ldr	r3, [pc, #300]	; (800778c <parser+0x6e8>)
 8007660:	79da      	ldrb	r2, [r3, #7]
 8007662:	4b49      	ldr	r3, [pc, #292]	; (8007788 <parser+0x6e4>)
 8007664:	70da      	strb	r2, [r3, #3]
								break;
 8007666:	e068      	b.n	800773a <parser+0x696>
								msg_size = 5;
 8007668:	4b45      	ldr	r3, [pc, #276]	; (8007780 <parser+0x6dc>)
 800766a:	2205      	movs	r2, #5
 800766c:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 800766e:	4b47      	ldr	r3, [pc, #284]	; (800778c <parser+0x6e8>)
 8007670:	799a      	ldrb	r2, [r3, #6]
 8007672:	4b45      	ldr	r3, [pc, #276]	; (8007788 <parser+0x6e4>)
 8007674:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 8007676:	4b45      	ldr	r3, [pc, #276]	; (800778c <parser+0x6e8>)
 8007678:	79da      	ldrb	r2, [r3, #7]
 800767a:	4b43      	ldr	r3, [pc, #268]	; (8007788 <parser+0x6e4>)
 800767c:	70da      	strb	r2, [r3, #3]
								break;
 800767e:	e05c      	b.n	800773a <parser+0x696>
								msg_size = 5;
 8007680:	4b3f      	ldr	r3, [pc, #252]	; (8007780 <parser+0x6dc>)
 8007682:	2205      	movs	r2, #5
 8007684:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 8007686:	4b41      	ldr	r3, [pc, #260]	; (800778c <parser+0x6e8>)
 8007688:	799a      	ldrb	r2, [r3, #6]
 800768a:	4b3f      	ldr	r3, [pc, #252]	; (8007788 <parser+0x6e4>)
 800768c:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 800768e:	4b3f      	ldr	r3, [pc, #252]	; (800778c <parser+0x6e8>)
 8007690:	79da      	ldrb	r2, [r3, #7]
 8007692:	4b3d      	ldr	r3, [pc, #244]	; (8007788 <parser+0x6e4>)
 8007694:	70da      	strb	r2, [r3, #3]
								break;
 8007696:	e050      	b.n	800773a <parser+0x696>
								msg_size = 5;
 8007698:	4b39      	ldr	r3, [pc, #228]	; (8007780 <parser+0x6dc>)
 800769a:	2205      	movs	r2, #5
 800769c:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 800769e:	4b3b      	ldr	r3, [pc, #236]	; (800778c <parser+0x6e8>)
 80076a0:	799a      	ldrb	r2, [r3, #6]
 80076a2:	4b39      	ldr	r3, [pc, #228]	; (8007788 <parser+0x6e4>)
 80076a4:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 80076a6:	4b39      	ldr	r3, [pc, #228]	; (800778c <parser+0x6e8>)
 80076a8:	79da      	ldrb	r2, [r3, #7]
 80076aa:	4b37      	ldr	r3, [pc, #220]	; (8007788 <parser+0x6e4>)
 80076ac:	70da      	strb	r2, [r3, #3]
								break;
 80076ae:	e044      	b.n	800773a <parser+0x696>
								msg_size = 5;
 80076b0:	4b33      	ldr	r3, [pc, #204]	; (8007780 <parser+0x6dc>)
 80076b2:	2205      	movs	r2, #5
 80076b4:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80076b6:	4b35      	ldr	r3, [pc, #212]	; (800778c <parser+0x6e8>)
 80076b8:	799a      	ldrb	r2, [r3, #6]
 80076ba:	4b33      	ldr	r3, [pc, #204]	; (8007788 <parser+0x6e4>)
 80076bc:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <parser+0x6e8>)
 80076c0:	79da      	ldrb	r2, [r3, #7]
 80076c2:	4b31      	ldr	r3, [pc, #196]	; (8007788 <parser+0x6e4>)
 80076c4:	70da      	strb	r2, [r3, #3]
								break;
 80076c6:	e038      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80076c8:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <parser+0x6dc>)
 80076ca:	2204      	movs	r2, #4
 80076cc:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80076ce:	4b2f      	ldr	r3, [pc, #188]	; (800778c <parser+0x6e8>)
 80076d0:	799a      	ldrb	r2, [r3, #6]
 80076d2:	4b2d      	ldr	r3, [pc, #180]	; (8007788 <parser+0x6e4>)
 80076d4:	709a      	strb	r2, [r3, #2]
								break;
 80076d6:	e030      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80076d8:	4b29      	ldr	r3, [pc, #164]	; (8007780 <parser+0x6dc>)
 80076da:	2204      	movs	r2, #4
 80076dc:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80076de:	4b2b      	ldr	r3, [pc, #172]	; (800778c <parser+0x6e8>)
 80076e0:	799a      	ldrb	r2, [r3, #6]
 80076e2:	4b29      	ldr	r3, [pc, #164]	; (8007788 <parser+0x6e4>)
 80076e4:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 80076e6:	4b29      	ldr	r3, [pc, #164]	; (800778c <parser+0x6e8>)
 80076e8:	79da      	ldrb	r2, [r3, #7]
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <parser+0x6e4>)
 80076ec:	70da      	strb	r2, [r3, #3]
								break;
 80076ee:	e024      	b.n	800773a <parser+0x696>
								msg_size = 3;
 80076f0:	4b23      	ldr	r3, [pc, #140]	; (8007780 <parser+0x6dc>)
 80076f2:	2203      	movs	r2, #3
 80076f4:	701a      	strb	r2, [r3, #0]
								break;
 80076f6:	e020      	b.n	800773a <parser+0x696>
								msg_size = 4;
 80076f8:	4b21      	ldr	r3, [pc, #132]	; (8007780 <parser+0x6dc>)
 80076fa:	2204      	movs	r2, #4
 80076fc:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 80076fe:	4b23      	ldr	r3, [pc, #140]	; (800778c <parser+0x6e8>)
 8007700:	799a      	ldrb	r2, [r3, #6]
 8007702:	4b21      	ldr	r3, [pc, #132]	; (8007788 <parser+0x6e4>)
 8007704:	709a      	strb	r2, [r3, #2]
								break;
 8007706:	e018      	b.n	800773a <parser+0x696>
								msg_size = 8;
 8007708:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <parser+0x6dc>)
 800770a:	2208      	movs	r2, #8
 800770c:	701a      	strb	r2, [r3, #0]
								tx_buffer_uart5[POS_UID] = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 800770e:	4b1f      	ldr	r3, [pc, #124]	; (800778c <parser+0x6e8>)
 8007710:	799a      	ldrb	r2, [r3, #6]
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <parser+0x6e4>)
 8007714:	709a      	strb	r2, [r3, #2]
								tx_buffer_uart5[POS_ACT] = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 8007716:	4b1d      	ldr	r3, [pc, #116]	; (800778c <parser+0x6e8>)
 8007718:	79da      	ldrb	r2, [r3, #7]
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <parser+0x6e4>)
 800771c:	70da      	strb	r2, [r3, #3]
								tx_buffer_uart5[POS_MSG_TYPE] = rx_buffer_uart2[POS_DATA_THIRD_BYTE];
 800771e:	4b1b      	ldr	r3, [pc, #108]	; (800778c <parser+0x6e8>)
 8007720:	7a1a      	ldrb	r2, [r3, #8]
 8007722:	4b19      	ldr	r3, [pc, #100]	; (8007788 <parser+0x6e4>)
 8007724:	711a      	strb	r2, [r3, #4]
								tx_buffer_uart5[POS_AXE] = rx_buffer_uart2[POS_DATA_FOURTH_BYTE];
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <parser+0x6e8>)
 8007728:	7a5a      	ldrb	r2, [r3, #9]
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <parser+0x6e4>)
 800772c:	715a      	strb	r2, [r3, #5]
								tx_buffer_uart5[POS_DATA_FIRST_BYTE] = rx_buffer_uart2[POS_DATA_LAST_BYTE];
 800772e:	4b17      	ldr	r3, [pc, #92]	; (800778c <parser+0x6e8>)
 8007730:	7a9a      	ldrb	r2, [r3, #10]
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <parser+0x6e4>)
 8007734:	719a      	strb	r2, [r3, #6]
								break;
 8007736:	e000      	b.n	800773a <parser+0x696>
								break;
 8007738:	bf00      	nop
							tx_buffer_uart5[POS_ID_FIRST_BYTE] = rx_buffer_uart2[POS_AXE];
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <parser+0x6e8>)
 800773c:	795a      	ldrb	r2, [r3, #5]
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <parser+0x6e4>)
 8007740:	701a      	strb	r2, [r3, #0]
							tx_buffer_uart5[POS_ID_LAST_BYTE] = rx_buffer_uart2[POS_MSG_TYPE];
 8007742:	4b12      	ldr	r3, [pc, #72]	; (800778c <parser+0x6e8>)
 8007744:	791a      	ldrb	r2, [r3, #4]
 8007746:	4b10      	ldr	r3, [pc, #64]	; (8007788 <parser+0x6e4>)
 8007748:	705a      	strb	r2, [r3, #1]
							tx_buffer_uart5[msg_size-1] = calc_checksum_uart5(msg_size);
 800774a:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <parser+0x6dc>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <parser+0x6dc>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	1e5c      	subs	r4, r3, #1
 8007756:	4610      	mov	r0, r2
 8007758:	f000 f8d8 	bl	800790c <calc_checksum_uart5>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <parser+0x6e4>)
 8007762:	551a      	strb	r2, [r3, r4]
							HAL_UART_Transmit(&huart5 ,tx_buffer_uart5, msg_size ,200);
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <parser+0x6dc>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b29a      	uxth	r2, r3
 800776a:	23c8      	movs	r3, #200	; 0xc8
 800776c:	4906      	ldr	r1, [pc, #24]	; (8007788 <parser+0x6e4>)
 800776e:	4808      	ldr	r0, [pc, #32]	; (8007790 <parser+0x6ec>)
 8007770:	f7fe f8be 	bl	80058f0 <HAL_UART_Transmit>
							memset(tx_buffer_uart5, 0, MSG_SIZE_UART5);
 8007774:	220c      	movs	r2, #12
 8007776:	2100      	movs	r1, #0
 8007778:	4803      	ldr	r0, [pc, #12]	; (8007788 <parser+0x6e4>)
 800777a:	f000 fa51 	bl	8007c20 <memset>
					break;
 800777e:	e024      	b.n	80077ca <parser+0x726>
 8007780:	2000030d 	.word	0x2000030d
 8007784:	2000030e 	.word	0x2000030e
 8007788:	20000300 	.word	0x20000300
 800778c:	200002dc 	.word	0x200002dc
 8007790:	200001b8 	.word	0x200001b8
						switch (msg_type){
 8007794:	79bb      	ldrb	r3, [r7, #6]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d00e      	beq.n	80077b8 <parser+0x714>
 800779a:	2b02      	cmp	r3, #2
 800779c:	dc0e      	bgt.n	80077bc <parser+0x718>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <parser+0x704>
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d004      	beq.n	80077b0 <parser+0x70c>
							break;
 80077a6:	e009      	b.n	80077bc <parser+0x718>
							effect_led = false;
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <parser+0x730>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
							break;
 80077ae:	e006      	b.n	80077be <parser+0x71a>
							effect_led = true;
 80077b0:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <parser+0x730>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
							break;
 80077b6:	e002      	b.n	80077be <parser+0x71a>
							break;
 80077b8:	bf00      	nop
 80077ba:	e000      	b.n	80077be <parser+0x71a>
							break;
 80077bc:	bf00      	nop
					choice_color();
 80077be:	f000 f8df 	bl	8007980 <choice_color>
					break;
 80077c2:	e002      	b.n	80077ca <parser+0x726>
						break;
 80077c4:	bf00      	nop
 80077c6:	e000      	b.n	80077ca <parser+0x726>
						break;
 80077c8:	bf00      	nop
				}
			}
		}
	}
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}
 80077d2:	bf00      	nop
 80077d4:	2000000c 	.word	0x2000000c

080077d8 <msg_manager>:

void msg_manager(UART_HandleTypeDef * uart){
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	if (uart2_irq_is_captured)
 80077e0:	4b15      	ldr	r3, [pc, #84]	; (8007838 <msg_manager+0x60>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <msg_manager+0x1c>
	{
		reception(&huart2);
 80077e8:	4814      	ldr	r0, [pc, #80]	; (800783c <msg_manager+0x64>)
 80077ea:	f7ff fc35 	bl	8007058 <reception>
		uart2_irq_is_captured = false;
 80077ee:	4b12      	ldr	r3, [pc, #72]	; (8007838 <msg_manager+0x60>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]
	}
	if (uart5_irq_is_captured){
 80077f4:	4b12      	ldr	r3, [pc, #72]	; (8007840 <msg_manager+0x68>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d018      	beq.n	800782e <msg_manager+0x56>
		HAL_UART_Transmit(&huart2,rx_buffer_uart5, msg_size_reception ,500);
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <msg_manager+0x6c>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b29a      	uxth	r2, r3
 8007802:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007806:	4910      	ldr	r1, [pc, #64]	; (8007848 <msg_manager+0x70>)
 8007808:	480c      	ldr	r0, [pc, #48]	; (800783c <msg_manager+0x64>)
 800780a:	f7fe f871 	bl	80058f0 <HAL_UART_Transmit>
		uart5_irq_is_captured = false;
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <msg_manager+0x68>)
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
		__HAL_UART_DISABLE_IT(&huart5,  UART_IT_RXNE);  // Disable UART2 RX interrupt
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <msg_manager+0x74>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4b0c      	ldr	r3, [pc, #48]	; (800784c <msg_manager+0x74>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0220 	bic.w	r2, r2, #32
 8007822:	601a      	str	r2, [r3, #0]
		memset(rx_buffer_uart5, 0, MSG_SIZE_UART2);
 8007824:	220c      	movs	r2, #12
 8007826:	2100      	movs	r1, #0
 8007828:	4807      	ldr	r0, [pc, #28]	; (8007848 <msg_manager+0x70>)
 800782a:	f000 f9f9 	bl	8007c20 <memset>
//	if (sending_msg)
//	{
//		transmission_uart2(uart);
//		sending_msg = 0;
//	}
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200002c8 	.word	0x200002c8
 800783c:	20000240 	.word	0x20000240
 8007840:	200002c9 	.word	0x200002c9
 8007844:	2000030e 	.word	0x2000030e
 8007848:	200002f4 	.word	0x200002f4
 800784c:	200001b8 	.word	0x200001b8

08007850 <check_msg_identifier>:

bool check_msg_identifier(){
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
	return rx_buffer_uart2[POS_ID_FIRST_BYTE] == MSG_ID_FIRST_BYTE
 8007854:	4b09      	ldr	r3, [pc, #36]	; (800787c <check_msg_identifier+0x2c>)
 8007856:	781b      	ldrb	r3, [r3, #0]
			&& rx_buffer_uart2[POS_ID_LAST_BYTE] == MSG_ID_LAST_BYTE;
 8007858:	2ba8      	cmp	r3, #168	; 0xa8
 800785a:	d105      	bne.n	8007868 <check_msg_identifier+0x18>
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <check_msg_identifier+0x2c>)
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	2b89      	cmp	r3, #137	; 0x89
 8007862:	d101      	bne.n	8007868 <check_msg_identifier+0x18>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <check_msg_identifier+0x1a>
 8007868:	2300      	movs	r3, #0
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	b2db      	uxtb	r3, r3
}
 8007870:	4618      	mov	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	200002dc 	.word	0x200002dc

08007880 <robot_uid>:

bool robot_uid(){
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
	return UID == rx_buffer_uart2[POS_UID];
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <robot_uid+0x1c>)
 8007886:	789b      	ldrb	r3, [r3, #2]
 8007888:	2b01      	cmp	r3, #1
 800788a:	bf0c      	ite	eq
 800788c:	2301      	moveq	r3, #1
 800788e:	2300      	movne	r3, #0
 8007890:	b2db      	uxtb	r3, r3
}
 8007892:	4618      	mov	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	200002dc 	.word	0x200002dc

080078a0 <calc_checksum_rx>:

uint8_t calc_checksum_rx(int trame){
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
//	for (int i = 0; i < trame; i++){
//		checksum = rx_buffer_uart2[i];
//	}
//	return checksum;
	return rx_buffer_uart2[POS_ID_FIRST_BYTE] + rx_buffer_uart2[POS_ID_LAST_BYTE] +
 80078a8:	4b17      	ldr	r3, [pc, #92]	; (8007908 <calc_checksum_rx+0x68>)
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	4b16      	ldr	r3, [pc, #88]	; (8007908 <calc_checksum_rx+0x68>)
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	4413      	add	r3, r2
 80078b2:	b2da      	uxtb	r2, r3
			rx_buffer_uart2[POS_UID] + rx_buffer_uart2[POS_ACT] + rx_buffer_uart2[POS_MSG_TYPE] +
 80078b4:	4b14      	ldr	r3, [pc, #80]	; (8007908 <calc_checksum_rx+0x68>)
 80078b6:	789b      	ldrb	r3, [r3, #2]
	return rx_buffer_uart2[POS_ID_FIRST_BYTE] + rx_buffer_uart2[POS_ID_LAST_BYTE] +
 80078b8:	4413      	add	r3, r2
 80078ba:	b2da      	uxtb	r2, r3
			rx_buffer_uart2[POS_UID] + rx_buffer_uart2[POS_ACT] + rx_buffer_uart2[POS_MSG_TYPE] +
 80078bc:	4b12      	ldr	r3, [pc, #72]	; (8007908 <calc_checksum_rx+0x68>)
 80078be:	78db      	ldrb	r3, [r3, #3]
 80078c0:	4413      	add	r3, r2
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <calc_checksum_rx+0x68>)
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	b2da      	uxtb	r2, r3
			rx_buffer_uart2[POS_AXE] + rx_buffer_uart2[POS_DATA_FIRST_BYTE] + rx_buffer_uart2[POS_DATA_SECOND_BYTE] +
 80078cc:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <calc_checksum_rx+0x68>)
 80078ce:	795b      	ldrb	r3, [r3, #5]
			rx_buffer_uart2[POS_UID] + rx_buffer_uart2[POS_ACT] + rx_buffer_uart2[POS_MSG_TYPE] +
 80078d0:	4413      	add	r3, r2
 80078d2:	b2da      	uxtb	r2, r3
			rx_buffer_uart2[POS_AXE] + rx_buffer_uart2[POS_DATA_FIRST_BYTE] + rx_buffer_uart2[POS_DATA_SECOND_BYTE] +
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <calc_checksum_rx+0x68>)
 80078d6:	799b      	ldrb	r3, [r3, #6]
 80078d8:	4413      	add	r3, r2
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <calc_checksum_rx+0x68>)
 80078de:	79db      	ldrb	r3, [r3, #7]
 80078e0:	4413      	add	r3, r2
 80078e2:	b2da      	uxtb	r2, r3
			rx_buffer_uart2[POS_DATA_THIRD_BYTE] + rx_buffer_uart2[POS_DATA_FOURTH_BYTE] + rx_buffer_uart2[POS_DATA_LAST_BYTE];
 80078e4:	4b08      	ldr	r3, [pc, #32]	; (8007908 <calc_checksum_rx+0x68>)
 80078e6:	7a1b      	ldrb	r3, [r3, #8]
			rx_buffer_uart2[POS_AXE] + rx_buffer_uart2[POS_DATA_FIRST_BYTE] + rx_buffer_uart2[POS_DATA_SECOND_BYTE] +
 80078e8:	4413      	add	r3, r2
 80078ea:	b2da      	uxtb	r2, r3
			rx_buffer_uart2[POS_DATA_THIRD_BYTE] + rx_buffer_uart2[POS_DATA_FOURTH_BYTE] + rx_buffer_uart2[POS_DATA_LAST_BYTE];
 80078ec:	4b06      	ldr	r3, [pc, #24]	; (8007908 <calc_checksum_rx+0x68>)
 80078ee:	7a5b      	ldrb	r3, [r3, #9]
 80078f0:	4413      	add	r3, r2
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <calc_checksum_rx+0x68>)
 80078f6:	7a9b      	ldrb	r3, [r3, #10]
 80078f8:	4413      	add	r3, r2
 80078fa:	b2db      	uxtb	r3, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	200002dc 	.word	0x200002dc

0800790c <calc_checksum_uart5>:
uint8_t calc_checksum_uart5(int trame){
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	checksum = 0;
 8007914:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <calc_checksum_uart5+0x48>)
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < trame; i++){
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e00c      	b.n	800793a <calc_checksum_uart5+0x2e>
			checksum += tx_buffer_uart5[i];
 8007920:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <calc_checksum_uart5+0x4c>)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <calc_checksum_uart5+0x48>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4413      	add	r3, r2
 800792e:	b2da      	uxtb	r2, r3
 8007930:	4b08      	ldr	r3, [pc, #32]	; (8007954 <calc_checksum_uart5+0x48>)
 8007932:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < trame; i++){
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	429a      	cmp	r2, r3
 8007940:	dbee      	blt.n	8007920 <calc_checksum_uart5+0x14>
		}
		return checksum;
 8007942:	4b04      	ldr	r3, [pc, #16]	; (8007954 <calc_checksum_uart5+0x48>)
 8007944:	781b      	ldrb	r3, [r3, #0]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	2000030c 	.word	0x2000030c
 8007958:	20000300 	.word	0x20000300

0800795c <check_checksum_rx>:

uint8_t check_checksum_rx(){
 800795c:	b598      	push	{r3, r4, r7, lr}
 800795e:	af00      	add	r7, sp, #0
	return rx_buffer_uart2[POS_CHECKSUM] == calc_checksum_rx(MSG_SIZE_UART2);
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <check_checksum_rx+0x20>)
 8007962:	7adc      	ldrb	r4, [r3, #11]
 8007964:	200c      	movs	r0, #12
 8007966:	f7ff ff9b 	bl	80078a0 <calc_checksum_rx>
 800796a:	4603      	mov	r3, r0
 800796c:	429c      	cmp	r4, r3
 800796e:	bf0c      	ite	eq
 8007970:	2301      	moveq	r3, #1
 8007972:	2300      	movne	r3, #0
 8007974:	b2db      	uxtb	r3, r3
}
 8007976:	4618      	mov	r0, r3
 8007978:	bd98      	pop	{r3, r4, r7, pc}
 800797a:	bf00      	nop
 800797c:	200002dc 	.word	0x200002dc

08007980 <choice_color>:

void choice_color(){
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
	red = rx_buffer_uart2[POS_AXE];
 8007984:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <choice_color+0x28>)
 8007986:	795a      	ldrb	r2, [r3, #5]
 8007988:	4b08      	ldr	r3, [pc, #32]	; (80079ac <choice_color+0x2c>)
 800798a:	701a      	strb	r2, [r3, #0]
	green = rx_buffer_uart2[POS_DATA_FIRST_BYTE];
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <choice_color+0x28>)
 800798e:	799a      	ldrb	r2, [r3, #6]
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <choice_color+0x30>)
 8007992:	701a      	strb	r2, [r3, #0]
	blue = rx_buffer_uart2[POS_DATA_SECOND_BYTE];
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <choice_color+0x28>)
 8007996:	79da      	ldrb	r2, [r3, #7]
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <choice_color+0x34>)
 800799a:	701a      	strb	r2, [r3, #0]
}
 800799c:	bf00      	nop
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	200002dc 	.word	0x200002dc
 80079ac:	200002d8 	.word	0x200002d8
 80079b0:	200002d9 	.word	0x200002d9
 80079b4:	200002da 	.word	0x200002da

080079b8 <WS2812_Send>:
extern TIM_HandleTypeDef htim1;
extern DMA_HandleTypeDef hdma_tim1_ch1;


void WS2812_Send (void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e04f      	b.n	8007a68 <WS2812_Send+0xb0>
	{
		if (effect_led){
 80079c8:	4b37      	ldr	r3, [pc, #220]	; (8007aa8 <WS2812_Send+0xf0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d014      	beq.n	80079fa <WS2812_Send+0x42>
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80079d0:	4a36      	ldr	r2, [pc, #216]	; (8007aac <WS2812_Send+0xf4>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	041a      	lsls	r2, r3, #16
 80079dc:	4933      	ldr	r1, [pc, #204]	; (8007aac <WS2812_Send+0xf4>)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	789b      	ldrb	r3, [r3, #2]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	431a      	orrs	r2, r3
 80079ea:	4930      	ldr	r1, [pc, #192]	; (8007aac <WS2812_Send+0xf4>)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	440b      	add	r3, r1
 80079f2:	78db      	ldrb	r3, [r3, #3]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	e013      	b.n	8007a22 <WS2812_Send+0x6a>
		}
		else{
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80079fa:	4a2d      	ldr	r2, [pc, #180]	; (8007ab0 <WS2812_Send+0xf8>)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	041a      	lsls	r2, r3, #16
 8007a06:	492a      	ldr	r1, [pc, #168]	; (8007ab0 <WS2812_Send+0xf8>)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	789b      	ldrb	r3, [r3, #2]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	431a      	orrs	r2, r3
 8007a14:	4926      	ldr	r1, [pc, #152]	; (8007ab0 <WS2812_Send+0xf8>)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	78db      	ldrb	r3, [r3, #3]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
		}

		for (int i=23; i>=0; i--)
 8007a22:	2317      	movs	r3, #23
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	e019      	b.n	8007a5c <WS2812_Send+0xa4>
		{
			if (color&(1<<i))
 8007a28:	2201      	movs	r2, #1
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <WS2812_Send+0x8e>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <WS2812_Send+0xfc>)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	213c      	movs	r1, #60	; 0x3c
 8007a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007a44:	e004      	b.n	8007a50 <WS2812_Send+0x98>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8007a46:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <WS2812_Send+0xfc>)
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	211e      	movs	r1, #30
 8007a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	3301      	adds	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dae2      	bge.n	8007a28 <WS2812_Send+0x70>
	for (int i= 0; i<MAX_LED; i++)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	ddac      	ble.n	80079c8 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8007a6e:	2300      	movs	r3, #0
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	e00a      	b.n	8007a8a <WS2812_Send+0xd2>
	{
		pwmData[indx] = 0;
 8007a74:	4a0f      	ldr	r2, [pc, #60]	; (8007ab4 <WS2812_Send+0xfc>)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	3301      	adds	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3301      	adds	r3, #1
 8007a88:	607b      	str	r3, [r7, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b31      	cmp	r3, #49	; 0x31
 8007a8e:	ddf1      	ble.n	8007a74 <WS2812_Send+0xbc>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <WS2812_Send+0xfc>)
 8007a96:	2100      	movs	r1, #0
 8007a98:	4807      	ldr	r0, [pc, #28]	; (8007ab8 <WS2812_Send+0x100>)
 8007a9a:	f7fc fa8d 	bl	8003fb8 <HAL_TIM_PWM_Start_DMA>
	//	while (!datasentflag){};
	//	datasentflag = 0;
}
 8007a9e:	bf00      	nop
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	2000000c 	.word	0x2000000c
 8007aac:	20000350 	.word	0x20000350
 8007ab0:	20000310 	.word	0x20000310
 8007ab4:	20000390 	.word	0x20000390
 8007ab8:	200000d8 	.word	0x200000d8

08007abc <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	b2d9      	uxtb	r1, r3
 8007ace:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <Set_LED+0x58>)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	b2d9      	uxtb	r1, r3
 8007ada:	4a0e      	ldr	r2, [pc, #56]	; (8007b14 <Set_LED+0x58>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	b2d9      	uxtb	r1, r3
 8007aea:	4a0a      	ldr	r2, [pc, #40]	; (8007b14 <Set_LED+0x58>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	460a      	mov	r2, r1
 8007af4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	b2d9      	uxtb	r1, r3
 8007afa:	4a06      	ldr	r2, [pc, #24]	; (8007b14 <Set_LED+0x58>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	460a      	mov	r2, r1
 8007b04:	70da      	strb	r2, [r3, #3]
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000310 	.word	0x20000310

08007b18 <Set_Brightness>:



void Set_Brightness (int brightness)  // 0-45
{
 8007b18:	b5b0      	push	{r4, r5, r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	if (effect_led){
 8007b20:	4b3b      	ldr	r3, [pc, #236]	; (8007c10 <Set_Brightness+0xf8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d06b      	beq.n	8007c00 <Set_Brightness+0xe8>

		if (brightness > 45) brightness = 45;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b2d      	cmp	r3, #45	; 0x2d
 8007b2c:	dd01      	ble.n	8007b32 <Set_Brightness+0x1a>
 8007b2e:	232d      	movs	r3, #45	; 0x2d
 8007b30:	607b      	str	r3, [r7, #4]
		for (int i=0; i<MAX_LED; i++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	e060      	b.n	8007bfa <Set_Brightness+0xe2>
		{
			LED_Mod[i][0] = LED_Data[i][0];
 8007b38:	4a36      	ldr	r2, [pc, #216]	; (8007c14 <Set_Brightness+0xfc>)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8007b40:	4a35      	ldr	r2, [pc, #212]	; (8007c18 <Set_Brightness+0x100>)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			for (int j=1; j<4; j++)
 8007b48:	2301      	movs	r3, #1
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e04f      	b.n	8007bee <Set_Brightness+0xd6>
			{
				float angle = 90-brightness;  // in degrees
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b5c:	edc7 7a03 	vstr	s15, [r7, #12]
				angle = angle*PI / 180;  // in rad
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7f8 fc95 	bl	8000490 <__aeabi_f2d>
 8007b66:	a328      	add	r3, pc, #160	; (adr r3, 8007c08 <Set_Brightness+0xf0>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fce8 	bl	8000540 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4610      	mov	r0, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	4b27      	ldr	r3, [pc, #156]	; (8007c1c <Set_Brightness+0x104>)
 8007b7e:	f7f8 fe09 	bl	8000794 <__aeabi_ddiv>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4610      	mov	r0, r2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7f8 ffbb 	bl	8000b04 <__aeabi_d2f>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	60fb      	str	r3, [r7, #12]
				LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8007b92:	4a20      	ldr	r2, [pc, #128]	; (8007c14 <Set_Brightness+0xfc>)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7f8 fc63 	bl	800046c <__aeabi_i2d>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7f8 fc70 	bl	8000490 <__aeabi_f2d>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	ec43 2b10 	vmov	d0, r2, r3
 8007bb8:	f000 f85e 	bl	8007c78 <tan>
 8007bbc:	ec53 2b10 	vmov	r2, r3, d0
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f7f8 fde6 	bl	8000794 <__aeabi_ddiv>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4619      	mov	r1, r3
 8007bd0:	f7f8 ff78 	bl	8000ac4 <__aeabi_d2uiz>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	b2d9      	uxtb	r1, r3
 8007bd8:	4a0f      	ldr	r2, [pc, #60]	; (8007c18 <Set_Brightness+0x100>)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4413      	add	r3, r2
 8007be4:	460a      	mov	r2, r1
 8007be6:	701a      	strb	r2, [r3, #0]
			for (int j=1; j<4; j++)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	3301      	adds	r3, #1
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	ddac      	ble.n	8007b4e <Set_Brightness+0x36>
		for (int i=0; i<MAX_LED; i++)
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b0f      	cmp	r3, #15
 8007bfe:	dd9b      	ble.n	8007b38 <Set_Brightness+0x20>
			}
		}
	}

}
 8007c00:	bf00      	nop
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}
 8007c08:	53c8d4f1 	.word	0x53c8d4f1
 8007c0c:	400921fb 	.word	0x400921fb
 8007c10:	2000000c 	.word	0x2000000c
 8007c14:	20000310 	.word	0x20000310
 8007c18:	20000350 	.word	0x20000350
 8007c1c:	40668000 	.word	0x40668000

08007c20 <memset>:
 8007c20:	4402      	add	r2, r0
 8007c22:	4603      	mov	r3, r0
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d100      	bne.n	8007c2a <memset+0xa>
 8007c28:	4770      	bx	lr
 8007c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2e:	e7f9      	b.n	8007c24 <memset+0x4>

08007c30 <__libc_init_array>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4d0d      	ldr	r5, [pc, #52]	; (8007c68 <__libc_init_array+0x38>)
 8007c34:	4c0d      	ldr	r4, [pc, #52]	; (8007c6c <__libc_init_array+0x3c>)
 8007c36:	1b64      	subs	r4, r4, r5
 8007c38:	10a4      	asrs	r4, r4, #2
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	42a6      	cmp	r6, r4
 8007c3e:	d109      	bne.n	8007c54 <__libc_init_array+0x24>
 8007c40:	4d0b      	ldr	r5, [pc, #44]	; (8007c70 <__libc_init_array+0x40>)
 8007c42:	4c0c      	ldr	r4, [pc, #48]	; (8007c74 <__libc_init_array+0x44>)
 8007c44:	f001 f8b8 	bl	8008db8 <_init>
 8007c48:	1b64      	subs	r4, r4, r5
 8007c4a:	10a4      	asrs	r4, r4, #2
 8007c4c:	2600      	movs	r6, #0
 8007c4e:	42a6      	cmp	r6, r4
 8007c50:	d105      	bne.n	8007c5e <__libc_init_array+0x2e>
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c58:	4798      	blx	r3
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7ee      	b.n	8007c3c <__libc_init_array+0xc>
 8007c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c62:	4798      	blx	r3
 8007c64:	3601      	adds	r6, #1
 8007c66:	e7f2      	b.n	8007c4e <__libc_init_array+0x1e>
 8007c68:	08008ff8 	.word	0x08008ff8
 8007c6c:	08008ff8 	.word	0x08008ff8
 8007c70:	08008ff8 	.word	0x08008ff8
 8007c74:	08008ffc 	.word	0x08008ffc

08007c78 <tan>:
 8007c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c7a:	ec53 2b10 	vmov	r2, r3, d0
 8007c7e:	4816      	ldr	r0, [pc, #88]	; (8007cd8 <tan+0x60>)
 8007c80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c84:	4281      	cmp	r1, r0
 8007c86:	dc07      	bgt.n	8007c98 <tan+0x20>
 8007c88:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007cd0 <tan+0x58>
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	b005      	add	sp, #20
 8007c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c94:	f000 b824 	b.w	8007ce0 <__kernel_tan>
 8007c98:	4810      	ldr	r0, [pc, #64]	; (8007cdc <tan+0x64>)
 8007c9a:	4281      	cmp	r1, r0
 8007c9c:	dd09      	ble.n	8007cb2 <tan+0x3a>
 8007c9e:	ee10 0a10 	vmov	r0, s0
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f7f8 fa94 	bl	80001d0 <__aeabi_dsub>
 8007ca8:	ec41 0b10 	vmov	d0, r0, r1
 8007cac:	b005      	add	sp, #20
 8007cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cb2:	4668      	mov	r0, sp
 8007cb4:	f000 fa20 	bl	80080f8 <__ieee754_rem_pio2>
 8007cb8:	0040      	lsls	r0, r0, #1
 8007cba:	f000 0002 	and.w	r0, r0, #2
 8007cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cc2:	ed9d 0b00 	vldr	d0, [sp]
 8007cc6:	f1c0 0001 	rsb	r0, r0, #1
 8007cca:	f000 f809 	bl	8007ce0 <__kernel_tan>
 8007cce:	e7ed      	b.n	8007cac <tan+0x34>
	...
 8007cd8:	3fe921fb 	.word	0x3fe921fb
 8007cdc:	7fefffff 	.word	0x7fefffff

08007ce0 <__kernel_tan>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	ed2d 8b06 	vpush	{d8-d10}
 8007ce8:	ec5b ab10 	vmov	sl, fp, d0
 8007cec:	4be0      	ldr	r3, [pc, #896]	; (8008070 <__kernel_tan+0x390>)
 8007cee:	b083      	sub	sp, #12
 8007cf0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007cf4:	429f      	cmp	r7, r3
 8007cf6:	ec59 8b11 	vmov	r8, r9, d1
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	f8cd b000 	str.w	fp, [sp]
 8007d00:	dc61      	bgt.n	8007dc6 <__kernel_tan+0xe6>
 8007d02:	ee10 0a10 	vmov	r0, s0
 8007d06:	4659      	mov	r1, fp
 8007d08:	f7f8 feb4 	bl	8000a74 <__aeabi_d2iz>
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f040 8083 	bne.w	8007e1a <__kernel_tan+0x13a>
 8007d14:	1c73      	adds	r3, r6, #1
 8007d16:	4652      	mov	r2, sl
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	433b      	orrs	r3, r7
 8007d1c:	d112      	bne.n	8007d44 <__kernel_tan+0x64>
 8007d1e:	ec4b ab10 	vmov	d0, sl, fp
 8007d22:	f000 fbef 	bl	8008504 <fabs>
 8007d26:	49d3      	ldr	r1, [pc, #844]	; (8008074 <__kernel_tan+0x394>)
 8007d28:	ec53 2b10 	vmov	r2, r3, d0
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f7f8 fd31 	bl	8000794 <__aeabi_ddiv>
 8007d32:	4682      	mov	sl, r0
 8007d34:	468b      	mov	fp, r1
 8007d36:	ec4b ab10 	vmov	d0, sl, fp
 8007d3a:	b003      	add	sp, #12
 8007d3c:	ecbd 8b06 	vpop	{d8-d10}
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	2e01      	cmp	r6, #1
 8007d46:	d0f6      	beq.n	8007d36 <__kernel_tan+0x56>
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	4659      	mov	r1, fp
 8007d50:	f7f8 fa40 	bl	80001d4 <__adddf3>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	460f      	mov	r7, r1
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	49c6      	ldr	r1, [pc, #792]	; (8008078 <__kernel_tan+0x398>)
 8007d5e:	f7f8 fd19 	bl	8000794 <__aeabi_ddiv>
 8007d62:	e9cd 0100 	strd	r0, r1, [sp]
 8007d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d6a:	462e      	mov	r6, r5
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	462c      	mov	r4, r5
 8007d70:	4630      	mov	r0, r6
 8007d72:	461d      	mov	r5, r3
 8007d74:	4639      	mov	r1, r7
 8007d76:	465b      	mov	r3, fp
 8007d78:	f7f8 fa2a 	bl	80001d0 <__aeabi_dsub>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4640      	mov	r0, r8
 8007d82:	4649      	mov	r1, r9
 8007d84:	f7f8 fa24 	bl	80001d0 <__aeabi_dsub>
 8007d88:	4632      	mov	r2, r6
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	f7f8 fbd8 	bl	8000540 <__aeabi_dmul>
 8007d90:	4632      	mov	r2, r6
 8007d92:	4680      	mov	r8, r0
 8007d94:	4689      	mov	r9, r1
 8007d96:	462b      	mov	r3, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f7f8 fbd0 	bl	8000540 <__aeabi_dmul>
 8007da0:	4bb4      	ldr	r3, [pc, #720]	; (8008074 <__kernel_tan+0x394>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	f7f8 fa16 	bl	80001d4 <__adddf3>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 fa10 	bl	80001d4 <__adddf3>
 8007db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db8:	f7f8 fbc2 	bl	8000540 <__aeabi_dmul>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	f7f8 fa08 	bl	80001d4 <__adddf3>
 8007dc4:	e7b5      	b.n	8007d32 <__kernel_tan+0x52>
 8007dc6:	4bad      	ldr	r3, [pc, #692]	; (800807c <__kernel_tan+0x39c>)
 8007dc8:	429f      	cmp	r7, r3
 8007dca:	dd26      	ble.n	8007e1a <__kernel_tan+0x13a>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da09      	bge.n	8007de6 <__kernel_tan+0x106>
 8007dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007dd6:	469b      	mov	fp, r3
 8007dd8:	ee10 aa10 	vmov	sl, s0
 8007ddc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007de0:	ee11 8a10 	vmov	r8, s2
 8007de4:	4699      	mov	r9, r3
 8007de6:	4652      	mov	r2, sl
 8007de8:	465b      	mov	r3, fp
 8007dea:	a183      	add	r1, pc, #524	; (adr r1, 8007ff8 <__kernel_tan+0x318>)
 8007dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df0:	f7f8 f9ee 	bl	80001d0 <__aeabi_dsub>
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	a180      	add	r1, pc, #512	; (adr r1, 8008000 <__kernel_tan+0x320>)
 8007dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e02:	f7f8 f9e5 	bl	80001d0 <__aeabi_dsub>
 8007e06:	4622      	mov	r2, r4
 8007e08:	462b      	mov	r3, r5
 8007e0a:	f7f8 f9e3 	bl	80001d4 <__adddf3>
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	4682      	mov	sl, r0
 8007e14:	468b      	mov	fp, r1
 8007e16:	f04f 0900 	mov.w	r9, #0
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	4650      	mov	r0, sl
 8007e20:	4659      	mov	r1, fp
 8007e22:	f7f8 fb8d 	bl	8000540 <__aeabi_dmul>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	ec43 2b18 	vmov	d8, r2, r3
 8007e2e:	f7f8 fb87 	bl	8000540 <__aeabi_dmul>
 8007e32:	ec53 2b18 	vmov	r2, r3, d8
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	f7f8 fb7f 	bl	8000540 <__aeabi_dmul>
 8007e42:	a371      	add	r3, pc, #452	; (adr r3, 8008008 <__kernel_tan+0x328>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	ec41 0b19 	vmov	d9, r0, r1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 fb76 	bl	8000540 <__aeabi_dmul>
 8007e54:	a36e      	add	r3, pc, #440	; (adr r3, 8008010 <__kernel_tan+0x330>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 f9bb 	bl	80001d4 <__adddf3>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f7f8 fb6d 	bl	8000540 <__aeabi_dmul>
 8007e66:	a36c      	add	r3, pc, #432	; (adr r3, 8008018 <__kernel_tan+0x338>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 f9b2 	bl	80001d4 <__adddf3>
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	f7f8 fb64 	bl	8000540 <__aeabi_dmul>
 8007e78:	a369      	add	r3, pc, #420	; (adr r3, 8008020 <__kernel_tan+0x340>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 f9a9 	bl	80001d4 <__adddf3>
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	f7f8 fb5b 	bl	8000540 <__aeabi_dmul>
 8007e8a:	a367      	add	r3, pc, #412	; (adr r3, 8008028 <__kernel_tan+0x348>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 f9a0 	bl	80001d4 <__adddf3>
 8007e94:	4622      	mov	r2, r4
 8007e96:	462b      	mov	r3, r5
 8007e98:	f7f8 fb52 	bl	8000540 <__aeabi_dmul>
 8007e9c:	a364      	add	r3, pc, #400	; (adr r3, 8008030 <__kernel_tan+0x350>)
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f7f8 f997 	bl	80001d4 <__adddf3>
 8007ea6:	ec53 2b18 	vmov	r2, r3, d8
 8007eaa:	f7f8 fb49 	bl	8000540 <__aeabi_dmul>
 8007eae:	a362      	add	r3, pc, #392	; (adr r3, 8008038 <__kernel_tan+0x358>)
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	ec41 0b1a 	vmov	d10, r0, r1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 fb40 	bl	8000540 <__aeabi_dmul>
 8007ec0:	a35f      	add	r3, pc, #380	; (adr r3, 8008040 <__kernel_tan+0x360>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 f985 	bl	80001d4 <__adddf3>
 8007eca:	4622      	mov	r2, r4
 8007ecc:	462b      	mov	r3, r5
 8007ece:	f7f8 fb37 	bl	8000540 <__aeabi_dmul>
 8007ed2:	a35d      	add	r3, pc, #372	; (adr r3, 8008048 <__kernel_tan+0x368>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 f97c 	bl	80001d4 <__adddf3>
 8007edc:	4622      	mov	r2, r4
 8007ede:	462b      	mov	r3, r5
 8007ee0:	f7f8 fb2e 	bl	8000540 <__aeabi_dmul>
 8007ee4:	a35a      	add	r3, pc, #360	; (adr r3, 8008050 <__kernel_tan+0x370>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 f973 	bl	80001d4 <__adddf3>
 8007eee:	4622      	mov	r2, r4
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	f7f8 fb25 	bl	8000540 <__aeabi_dmul>
 8007ef6:	a358      	add	r3, pc, #352	; (adr r3, 8008058 <__kernel_tan+0x378>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 f96a 	bl	80001d4 <__adddf3>
 8007f00:	4622      	mov	r2, r4
 8007f02:	462b      	mov	r3, r5
 8007f04:	f7f8 fb1c 	bl	8000540 <__aeabi_dmul>
 8007f08:	a355      	add	r3, pc, #340	; (adr r3, 8008060 <__kernel_tan+0x380>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 f961 	bl	80001d4 <__adddf3>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	ec51 0b1a 	vmov	r0, r1, d10
 8007f1a:	f7f8 f95b 	bl	80001d4 <__adddf3>
 8007f1e:	ec53 2b19 	vmov	r2, r3, d9
 8007f22:	f7f8 fb0d 	bl	8000540 <__aeabi_dmul>
 8007f26:	4642      	mov	r2, r8
 8007f28:	464b      	mov	r3, r9
 8007f2a:	f7f8 f953 	bl	80001d4 <__adddf3>
 8007f2e:	ec53 2b18 	vmov	r2, r3, d8
 8007f32:	f7f8 fb05 	bl	8000540 <__aeabi_dmul>
 8007f36:	4642      	mov	r2, r8
 8007f38:	464b      	mov	r3, r9
 8007f3a:	f7f8 f94b 	bl	80001d4 <__adddf3>
 8007f3e:	a34a      	add	r3, pc, #296	; (adr r3, 8008068 <__kernel_tan+0x388>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	ec51 0b19 	vmov	r0, r1, d9
 8007f4c:	f7f8 faf8 	bl	8000540 <__aeabi_dmul>
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	f7f8 f93e 	bl	80001d4 <__adddf3>
 8007f58:	460b      	mov	r3, r1
 8007f5a:	ec41 0b18 	vmov	d8, r0, r1
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4659      	mov	r1, fp
 8007f62:	4650      	mov	r0, sl
 8007f64:	f7f8 f936 	bl	80001d4 <__adddf3>
 8007f68:	4b44      	ldr	r3, [pc, #272]	; (800807c <__kernel_tan+0x39c>)
 8007f6a:	429f      	cmp	r7, r3
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	f340 8086 	ble.w	8008080 <__kernel_tan+0x3a0>
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7f8 fa79 	bl	800046c <__aeabi_i2d>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	4680      	mov	r8, r0
 8007f7e:	4689      	mov	r9, r1
 8007f80:	462b      	mov	r3, r5
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 fadb 	bl	8000540 <__aeabi_dmul>
 8007f8a:	4642      	mov	r2, r8
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	464b      	mov	r3, r9
 8007f92:	4620      	mov	r0, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7f8 f91d 	bl	80001d4 <__adddf3>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	f7f8 fbf7 	bl	8000794 <__aeabi_ddiv>
 8007fa6:	ec53 2b18 	vmov	r2, r3, d8
 8007faa:	f7f8 f911 	bl	80001d0 <__aeabi_dsub>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	f7f8 f90b 	bl	80001d0 <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	f7f8 f909 	bl	80001d4 <__adddf3>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	f7f8 f901 	bl	80001d0 <__aeabi_dsub>
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8007fd4:	f00a 0a02 	and.w	sl, sl, #2
 8007fd8:	4604      	mov	r4, r0
 8007fda:	f1ca 0001 	rsb	r0, sl, #1
 8007fde:	460d      	mov	r5, r1
 8007fe0:	f7f8 fa44 	bl	800046c <__aeabi_i2d>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 faa8 	bl	8000540 <__aeabi_dmul>
 8007ff0:	e69f      	b.n	8007d32 <__kernel_tan+0x52>
 8007ff2:	bf00      	nop
 8007ff4:	f3af 8000 	nop.w
 8007ff8:	54442d18 	.word	0x54442d18
 8007ffc:	3fe921fb 	.word	0x3fe921fb
 8008000:	33145c07 	.word	0x33145c07
 8008004:	3c81a626 	.word	0x3c81a626
 8008008:	74bf7ad4 	.word	0x74bf7ad4
 800800c:	3efb2a70 	.word	0x3efb2a70
 8008010:	32f0a7e9 	.word	0x32f0a7e9
 8008014:	3f12b80f 	.word	0x3f12b80f
 8008018:	1a8d1068 	.word	0x1a8d1068
 800801c:	3f3026f7 	.word	0x3f3026f7
 8008020:	fee08315 	.word	0xfee08315
 8008024:	3f57dbc8 	.word	0x3f57dbc8
 8008028:	e96e8493 	.word	0xe96e8493
 800802c:	3f8226e3 	.word	0x3f8226e3
 8008030:	1bb341fe 	.word	0x1bb341fe
 8008034:	3faba1ba 	.word	0x3faba1ba
 8008038:	db605373 	.word	0xdb605373
 800803c:	bef375cb 	.word	0xbef375cb
 8008040:	a03792a6 	.word	0xa03792a6
 8008044:	3f147e88 	.word	0x3f147e88
 8008048:	f2f26501 	.word	0xf2f26501
 800804c:	3f4344d8 	.word	0x3f4344d8
 8008050:	c9560328 	.word	0xc9560328
 8008054:	3f6d6d22 	.word	0x3f6d6d22
 8008058:	8406d637 	.word	0x8406d637
 800805c:	3f9664f4 	.word	0x3f9664f4
 8008060:	1110fe7a 	.word	0x1110fe7a
 8008064:	3fc11111 	.word	0x3fc11111
 8008068:	55555563 	.word	0x55555563
 800806c:	3fd55555 	.word	0x3fd55555
 8008070:	3e2fffff 	.word	0x3e2fffff
 8008074:	3ff00000 	.word	0x3ff00000
 8008078:	bff00000 	.word	0xbff00000
 800807c:	3fe59427 	.word	0x3fe59427
 8008080:	2e01      	cmp	r6, #1
 8008082:	d02f      	beq.n	80080e4 <__kernel_tan+0x404>
 8008084:	460f      	mov	r7, r1
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4689      	mov	r9, r1
 800808c:	2000      	movs	r0, #0
 800808e:	4917      	ldr	r1, [pc, #92]	; (80080ec <__kernel_tan+0x40c>)
 8008090:	f7f8 fb80 	bl	8000794 <__aeabi_ddiv>
 8008094:	2600      	movs	r6, #0
 8008096:	e9cd 0100 	strd	r0, r1, [sp]
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	4630      	mov	r0, r6
 80080a0:	4639      	mov	r1, r7
 80080a2:	f7f8 f895 	bl	80001d0 <__aeabi_dsub>
 80080a6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	ec51 0b18 	vmov	r0, r1, d8
 80080b2:	f7f8 f88d 	bl	80001d0 <__aeabi_dsub>
 80080b6:	4632      	mov	r2, r6
 80080b8:	462b      	mov	r3, r5
 80080ba:	f7f8 fa41 	bl	8000540 <__aeabi_dmul>
 80080be:	46b0      	mov	r8, r6
 80080c0:	460f      	mov	r7, r1
 80080c2:	4642      	mov	r2, r8
 80080c4:	462b      	mov	r3, r5
 80080c6:	4634      	mov	r4, r6
 80080c8:	4649      	mov	r1, r9
 80080ca:	4606      	mov	r6, r0
 80080cc:	4640      	mov	r0, r8
 80080ce:	f7f8 fa37 	bl	8000540 <__aeabi_dmul>
 80080d2:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <__kernel_tan+0x410>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	f7f8 f87d 	bl	80001d4 <__adddf3>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4630      	mov	r0, r6
 80080e0:	4639      	mov	r1, r7
 80080e2:	e665      	b.n	8007db0 <__kernel_tan+0xd0>
 80080e4:	4682      	mov	sl, r0
 80080e6:	468b      	mov	fp, r1
 80080e8:	e625      	b.n	8007d36 <__kernel_tan+0x56>
 80080ea:	bf00      	nop
 80080ec:	bff00000 	.word	0xbff00000
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	00000000 	.word	0x00000000

080080f8 <__ieee754_rem_pio2>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b02 	vpush	{d8}
 8008100:	ec55 4b10 	vmov	r4, r5, d0
 8008104:	4bca      	ldr	r3, [pc, #808]	; (8008430 <__ieee754_rem_pio2+0x338>)
 8008106:	b08b      	sub	sp, #44	; 0x2c
 8008108:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800810c:	4598      	cmp	r8, r3
 800810e:	4682      	mov	sl, r0
 8008110:	9502      	str	r5, [sp, #8]
 8008112:	dc08      	bgt.n	8008126 <__ieee754_rem_pio2+0x2e>
 8008114:	2200      	movs	r2, #0
 8008116:	2300      	movs	r3, #0
 8008118:	ed80 0b00 	vstr	d0, [r0]
 800811c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008120:	f04f 0b00 	mov.w	fp, #0
 8008124:	e028      	b.n	8008178 <__ieee754_rem_pio2+0x80>
 8008126:	4bc3      	ldr	r3, [pc, #780]	; (8008434 <__ieee754_rem_pio2+0x33c>)
 8008128:	4598      	cmp	r8, r3
 800812a:	dc78      	bgt.n	800821e <__ieee754_rem_pio2+0x126>
 800812c:	9b02      	ldr	r3, [sp, #8]
 800812e:	4ec2      	ldr	r6, [pc, #776]	; (8008438 <__ieee754_rem_pio2+0x340>)
 8008130:	2b00      	cmp	r3, #0
 8008132:	ee10 0a10 	vmov	r0, s0
 8008136:	a3b0      	add	r3, pc, #704	; (adr r3, 80083f8 <__ieee754_rem_pio2+0x300>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	4629      	mov	r1, r5
 800813e:	dd39      	ble.n	80081b4 <__ieee754_rem_pio2+0xbc>
 8008140:	f7f8 f846 	bl	80001d0 <__aeabi_dsub>
 8008144:	45b0      	cmp	r8, r6
 8008146:	4604      	mov	r4, r0
 8008148:	460d      	mov	r5, r1
 800814a:	d01b      	beq.n	8008184 <__ieee754_rem_pio2+0x8c>
 800814c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008400 <__ieee754_rem_pio2+0x308>)
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f7f8 f83d 	bl	80001d0 <__aeabi_dsub>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	e9ca 2300 	strd	r2, r3, [sl]
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 f835 	bl	80001d0 <__aeabi_dsub>
 8008166:	a3a6      	add	r3, pc, #664	; (adr r3, 8008400 <__ieee754_rem_pio2+0x308>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 f830 	bl	80001d0 <__aeabi_dsub>
 8008170:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008174:	f04f 0b01 	mov.w	fp, #1
 8008178:	4658      	mov	r0, fp
 800817a:	b00b      	add	sp, #44	; 0x2c
 800817c:	ecbd 8b02 	vpop	{d8}
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	a3a0      	add	r3, pc, #640	; (adr r3, 8008408 <__ieee754_rem_pio2+0x310>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 f821 	bl	80001d0 <__aeabi_dsub>
 800818e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008410 <__ieee754_rem_pio2+0x318>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	f7f8 f81a 	bl	80001d0 <__aeabi_dsub>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	e9ca 2300 	strd	r2, r3, [sl]
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f8 f812 	bl	80001d0 <__aeabi_dsub>
 80081ac:	a398      	add	r3, pc, #608	; (adr r3, 8008410 <__ieee754_rem_pio2+0x318>)
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	e7db      	b.n	800816c <__ieee754_rem_pio2+0x74>
 80081b4:	f7f8 f80e 	bl	80001d4 <__adddf3>
 80081b8:	45b0      	cmp	r8, r6
 80081ba:	4604      	mov	r4, r0
 80081bc:	460d      	mov	r5, r1
 80081be:	d016      	beq.n	80081ee <__ieee754_rem_pio2+0xf6>
 80081c0:	a38f      	add	r3, pc, #572	; (adr r3, 8008400 <__ieee754_rem_pio2+0x308>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f805 	bl	80001d4 <__adddf3>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	e9ca 2300 	strd	r2, r3, [sl]
 80081d2:	4620      	mov	r0, r4
 80081d4:	4629      	mov	r1, r5
 80081d6:	f7f7 fffb 	bl	80001d0 <__aeabi_dsub>
 80081da:	a389      	add	r3, pc, #548	; (adr r3, 8008400 <__ieee754_rem_pio2+0x308>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f7 fff8 	bl	80001d4 <__adddf3>
 80081e4:	f04f 3bff 	mov.w	fp, #4294967295
 80081e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80081ec:	e7c4      	b.n	8008178 <__ieee754_rem_pio2+0x80>
 80081ee:	a386      	add	r3, pc, #536	; (adr r3, 8008408 <__ieee754_rem_pio2+0x310>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f7 ffee 	bl	80001d4 <__adddf3>
 80081f8:	a385      	add	r3, pc, #532	; (adr r3, 8008410 <__ieee754_rem_pio2+0x318>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	4604      	mov	r4, r0
 8008200:	460d      	mov	r5, r1
 8008202:	f7f7 ffe7 	bl	80001d4 <__adddf3>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	e9ca 2300 	strd	r2, r3, [sl]
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f7 ffdd 	bl	80001d0 <__aeabi_dsub>
 8008216:	a37e      	add	r3, pc, #504	; (adr r3, 8008410 <__ieee754_rem_pio2+0x318>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	e7e0      	b.n	80081e0 <__ieee754_rem_pio2+0xe8>
 800821e:	4b87      	ldr	r3, [pc, #540]	; (800843c <__ieee754_rem_pio2+0x344>)
 8008220:	4598      	cmp	r8, r3
 8008222:	f300 80d8 	bgt.w	80083d6 <__ieee754_rem_pio2+0x2de>
 8008226:	f000 f96d 	bl	8008504 <fabs>
 800822a:	ec55 4b10 	vmov	r4, r5, d0
 800822e:	ee10 0a10 	vmov	r0, s0
 8008232:	a379      	add	r3, pc, #484	; (adr r3, 8008418 <__ieee754_rem_pio2+0x320>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 f981 	bl	8000540 <__aeabi_dmul>
 800823e:	4b80      	ldr	r3, [pc, #512]	; (8008440 <__ieee754_rem_pio2+0x348>)
 8008240:	2200      	movs	r2, #0
 8008242:	f7f7 ffc7 	bl	80001d4 <__adddf3>
 8008246:	f7f8 fc15 	bl	8000a74 <__aeabi_d2iz>
 800824a:	4683      	mov	fp, r0
 800824c:	f7f8 f90e 	bl	800046c <__aeabi_i2d>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	ec43 2b18 	vmov	d8, r2, r3
 8008258:	a367      	add	r3, pc, #412	; (adr r3, 80083f8 <__ieee754_rem_pio2+0x300>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f8 f96f 	bl	8000540 <__aeabi_dmul>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f7 ffb1 	bl	80001d0 <__aeabi_dsub>
 800826e:	a364      	add	r3, pc, #400	; (adr r3, 8008400 <__ieee754_rem_pio2+0x308>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	4606      	mov	r6, r0
 8008276:	460f      	mov	r7, r1
 8008278:	ec51 0b18 	vmov	r0, r1, d8
 800827c:	f7f8 f960 	bl	8000540 <__aeabi_dmul>
 8008280:	f1bb 0f1f 	cmp.w	fp, #31
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	dc0d      	bgt.n	80082a6 <__ieee754_rem_pio2+0x1ae>
 800828a:	4b6e      	ldr	r3, [pc, #440]	; (8008444 <__ieee754_rem_pio2+0x34c>)
 800828c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008294:	4543      	cmp	r3, r8
 8008296:	d006      	beq.n	80082a6 <__ieee754_rem_pio2+0x1ae>
 8008298:	4622      	mov	r2, r4
 800829a:	462b      	mov	r3, r5
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f7 ff96 	bl	80001d0 <__aeabi_dsub>
 80082a4:	e00e      	b.n	80082c4 <__ieee754_rem_pio2+0x1cc>
 80082a6:	462b      	mov	r3, r5
 80082a8:	4622      	mov	r2, r4
 80082aa:	4630      	mov	r0, r6
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f7 ff8f 	bl	80001d0 <__aeabi_dsub>
 80082b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	dc02      	bgt.n	80082ca <__ieee754_rem_pio2+0x1d2>
 80082c4:	e9ca 0100 	strd	r0, r1, [sl]
 80082c8:	e039      	b.n	800833e <__ieee754_rem_pio2+0x246>
 80082ca:	a34f      	add	r3, pc, #316	; (adr r3, 8008408 <__ieee754_rem_pio2+0x310>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	ec51 0b18 	vmov	r0, r1, d8
 80082d4:	f7f8 f934 	bl	8000540 <__aeabi_dmul>
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f7 ff74 	bl	80001d0 <__aeabi_dsub>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4680      	mov	r8, r0
 80082ee:	4689      	mov	r9, r1
 80082f0:	4630      	mov	r0, r6
 80082f2:	4639      	mov	r1, r7
 80082f4:	f7f7 ff6c 	bl	80001d0 <__aeabi_dsub>
 80082f8:	4622      	mov	r2, r4
 80082fa:	462b      	mov	r3, r5
 80082fc:	f7f7 ff68 	bl	80001d0 <__aeabi_dsub>
 8008300:	a343      	add	r3, pc, #268	; (adr r3, 8008410 <__ieee754_rem_pio2+0x318>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	ec51 0b18 	vmov	r0, r1, d8
 800830e:	f7f8 f917 	bl	8000540 <__aeabi_dmul>
 8008312:	4622      	mov	r2, r4
 8008314:	462b      	mov	r3, r5
 8008316:	f7f7 ff5b 	bl	80001d0 <__aeabi_dsub>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4604      	mov	r4, r0
 8008320:	460d      	mov	r5, r1
 8008322:	4640      	mov	r0, r8
 8008324:	4649      	mov	r1, r9
 8008326:	f7f7 ff53 	bl	80001d0 <__aeabi_dsub>
 800832a:	9a03      	ldr	r2, [sp, #12]
 800832c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b31      	cmp	r3, #49	; 0x31
 8008334:	dc24      	bgt.n	8008380 <__ieee754_rem_pio2+0x288>
 8008336:	e9ca 0100 	strd	r0, r1, [sl]
 800833a:	4646      	mov	r6, r8
 800833c:	464f      	mov	r7, r9
 800833e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008342:	4630      	mov	r0, r6
 8008344:	4642      	mov	r2, r8
 8008346:	464b      	mov	r3, r9
 8008348:	4639      	mov	r1, r7
 800834a:	f7f7 ff41 	bl	80001d0 <__aeabi_dsub>
 800834e:	462b      	mov	r3, r5
 8008350:	4622      	mov	r2, r4
 8008352:	f7f7 ff3d 	bl	80001d0 <__aeabi_dsub>
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800835e:	f6bf af0b 	bge.w	8008178 <__ieee754_rem_pio2+0x80>
 8008362:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008366:	f8ca 3004 	str.w	r3, [sl, #4]
 800836a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800836e:	f8ca 8000 	str.w	r8, [sl]
 8008372:	f8ca 0008 	str.w	r0, [sl, #8]
 8008376:	f8ca 300c 	str.w	r3, [sl, #12]
 800837a:	f1cb 0b00 	rsb	fp, fp, #0
 800837e:	e6fb      	b.n	8008178 <__ieee754_rem_pio2+0x80>
 8008380:	a327      	add	r3, pc, #156	; (adr r3, 8008420 <__ieee754_rem_pio2+0x328>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	ec51 0b18 	vmov	r0, r1, d8
 800838a:	f7f8 f8d9 	bl	8000540 <__aeabi_dmul>
 800838e:	4604      	mov	r4, r0
 8008390:	460d      	mov	r5, r1
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f7 ff19 	bl	80001d0 <__aeabi_dsub>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f7 ff11 	bl	80001d0 <__aeabi_dsub>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f7f7 ff0d 	bl	80001d0 <__aeabi_dsub>
 80083b6:	a31c      	add	r3, pc, #112	; (adr r3, 8008428 <__ieee754_rem_pio2+0x330>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	ec51 0b18 	vmov	r0, r1, d8
 80083c4:	f7f8 f8bc 	bl	8000540 <__aeabi_dmul>
 80083c8:	4622      	mov	r2, r4
 80083ca:	462b      	mov	r3, r5
 80083cc:	f7f7 ff00 	bl	80001d0 <__aeabi_dsub>
 80083d0:	4604      	mov	r4, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	e760      	b.n	8008298 <__ieee754_rem_pio2+0x1a0>
 80083d6:	4b1c      	ldr	r3, [pc, #112]	; (8008448 <__ieee754_rem_pio2+0x350>)
 80083d8:	4598      	cmp	r8, r3
 80083da:	dd37      	ble.n	800844c <__ieee754_rem_pio2+0x354>
 80083dc:	ee10 2a10 	vmov	r2, s0
 80083e0:	462b      	mov	r3, r5
 80083e2:	4620      	mov	r0, r4
 80083e4:	4629      	mov	r1, r5
 80083e6:	f7f7 fef3 	bl	80001d0 <__aeabi_dsub>
 80083ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083ee:	e9ca 0100 	strd	r0, r1, [sl]
 80083f2:	e695      	b.n	8008120 <__ieee754_rem_pio2+0x28>
 80083f4:	f3af 8000 	nop.w
 80083f8:	54400000 	.word	0x54400000
 80083fc:	3ff921fb 	.word	0x3ff921fb
 8008400:	1a626331 	.word	0x1a626331
 8008404:	3dd0b461 	.word	0x3dd0b461
 8008408:	1a600000 	.word	0x1a600000
 800840c:	3dd0b461 	.word	0x3dd0b461
 8008410:	2e037073 	.word	0x2e037073
 8008414:	3ba3198a 	.word	0x3ba3198a
 8008418:	6dc9c883 	.word	0x6dc9c883
 800841c:	3fe45f30 	.word	0x3fe45f30
 8008420:	2e000000 	.word	0x2e000000
 8008424:	3ba3198a 	.word	0x3ba3198a
 8008428:	252049c1 	.word	0x252049c1
 800842c:	397b839a 	.word	0x397b839a
 8008430:	3fe921fb 	.word	0x3fe921fb
 8008434:	4002d97b 	.word	0x4002d97b
 8008438:	3ff921fb 	.word	0x3ff921fb
 800843c:	413921fb 	.word	0x413921fb
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	08008e18 	.word	0x08008e18
 8008448:	7fefffff 	.word	0x7fefffff
 800844c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008450:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008454:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008458:	4620      	mov	r0, r4
 800845a:	460d      	mov	r5, r1
 800845c:	f7f8 fb0a 	bl	8000a74 <__aeabi_d2iz>
 8008460:	f7f8 f804 	bl	800046c <__aeabi_i2d>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4620      	mov	r0, r4
 800846a:	4629      	mov	r1, r5
 800846c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008470:	f7f7 feae 	bl	80001d0 <__aeabi_dsub>
 8008474:	4b21      	ldr	r3, [pc, #132]	; (80084fc <__ieee754_rem_pio2+0x404>)
 8008476:	2200      	movs	r2, #0
 8008478:	f7f8 f862 	bl	8000540 <__aeabi_dmul>
 800847c:	460d      	mov	r5, r1
 800847e:	4604      	mov	r4, r0
 8008480:	f7f8 faf8 	bl	8000a74 <__aeabi_d2iz>
 8008484:	f7f7 fff2 	bl	800046c <__aeabi_i2d>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008494:	f7f7 fe9c 	bl	80001d0 <__aeabi_dsub>
 8008498:	4b18      	ldr	r3, [pc, #96]	; (80084fc <__ieee754_rem_pio2+0x404>)
 800849a:	2200      	movs	r2, #0
 800849c:	f7f8 f850 	bl	8000540 <__aeabi_dmul>
 80084a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80084a8:	2703      	movs	r7, #3
 80084aa:	2400      	movs	r4, #0
 80084ac:	2500      	movs	r5, #0
 80084ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	46b9      	mov	r9, r7
 80084b8:	3f01      	subs	r7, #1
 80084ba:	f7f8 faa9 	bl	8000a10 <__aeabi_dcmpeq>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d1f5      	bne.n	80084ae <__ieee754_rem_pio2+0x3b6>
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <__ieee754_rem_pio2+0x408>)
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	2302      	movs	r3, #2
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	4632      	mov	r2, r6
 80084cc:	464b      	mov	r3, r9
 80084ce:	4651      	mov	r1, sl
 80084d0:	a804      	add	r0, sp, #16
 80084d2:	f000 f821 	bl	8008518 <__kernel_rem_pio2>
 80084d6:	9b02      	ldr	r3, [sp, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	4683      	mov	fp, r0
 80084dc:	f6bf ae4c 	bge.w	8008178 <__ieee754_rem_pio2+0x80>
 80084e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80084e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084e8:	e9ca 2300 	strd	r2, r3, [sl]
 80084ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80084f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80084f8:	e73f      	b.n	800837a <__ieee754_rem_pio2+0x282>
 80084fa:	bf00      	nop
 80084fc:	41700000 	.word	0x41700000
 8008500:	08008e98 	.word	0x08008e98

08008504 <fabs>:
 8008504:	ec51 0b10 	vmov	r0, r1, d0
 8008508:	ee10 2a10 	vmov	r2, s0
 800850c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008510:	ec43 2b10 	vmov	d0, r2, r3
 8008514:	4770      	bx	lr
	...

08008518 <__kernel_rem_pio2>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	ed2d 8b02 	vpush	{d8}
 8008520:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008524:	f112 0f14 	cmn.w	r2, #20
 8008528:	9306      	str	r3, [sp, #24]
 800852a:	9104      	str	r1, [sp, #16]
 800852c:	4bc2      	ldr	r3, [pc, #776]	; (8008838 <__kernel_rem_pio2+0x320>)
 800852e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008530:	9009      	str	r0, [sp, #36]	; 0x24
 8008532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	f103 33ff 	add.w	r3, r3, #4294967295
 800853e:	bfa8      	it	ge
 8008540:	1ed4      	subge	r4, r2, #3
 8008542:	9305      	str	r3, [sp, #20]
 8008544:	bfb2      	itee	lt
 8008546:	2400      	movlt	r4, #0
 8008548:	2318      	movge	r3, #24
 800854a:	fb94 f4f3 	sdivge	r4, r4, r3
 800854e:	f06f 0317 	mvn.w	r3, #23
 8008552:	fb04 3303 	mla	r3, r4, r3, r3
 8008556:	eb03 0a02 	add.w	sl, r3, r2
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	9a05      	ldr	r2, [sp, #20]
 800855e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008828 <__kernel_rem_pio2+0x310>
 8008562:	eb03 0802 	add.w	r8, r3, r2
 8008566:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008568:	1aa7      	subs	r7, r4, r2
 800856a:	ae20      	add	r6, sp, #128	; 0x80
 800856c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008570:	2500      	movs	r5, #0
 8008572:	4545      	cmp	r5, r8
 8008574:	dd13      	ble.n	800859e <__kernel_rem_pio2+0x86>
 8008576:	9b06      	ldr	r3, [sp, #24]
 8008578:	aa20      	add	r2, sp, #128	; 0x80
 800857a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800857e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008582:	f04f 0800 	mov.w	r8, #0
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	4598      	cmp	r8, r3
 800858a:	dc31      	bgt.n	80085f0 <__kernel_rem_pio2+0xd8>
 800858c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008828 <__kernel_rem_pio2+0x310>
 8008590:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008594:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008598:	462f      	mov	r7, r5
 800859a:	2600      	movs	r6, #0
 800859c:	e01b      	b.n	80085d6 <__kernel_rem_pio2+0xbe>
 800859e:	42ef      	cmn	r7, r5
 80085a0:	d407      	bmi.n	80085b2 <__kernel_rem_pio2+0x9a>
 80085a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80085a6:	f7f7 ff61 	bl	800046c <__aeabi_i2d>
 80085aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80085ae:	3501      	adds	r5, #1
 80085b0:	e7df      	b.n	8008572 <__kernel_rem_pio2+0x5a>
 80085b2:	ec51 0b18 	vmov	r0, r1, d8
 80085b6:	e7f8      	b.n	80085aa <__kernel_rem_pio2+0x92>
 80085b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80085c0:	f7f7 ffbe 	bl	8000540 <__aeabi_dmul>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085cc:	f7f7 fe02 	bl	80001d4 <__adddf3>
 80085d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d4:	3601      	adds	r6, #1
 80085d6:	9b05      	ldr	r3, [sp, #20]
 80085d8:	429e      	cmp	r6, r3
 80085da:	f1a7 0708 	sub.w	r7, r7, #8
 80085de:	ddeb      	ble.n	80085b8 <__kernel_rem_pio2+0xa0>
 80085e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085e4:	f108 0801 	add.w	r8, r8, #1
 80085e8:	ecab 7b02 	vstmia	fp!, {d7}
 80085ec:	3508      	adds	r5, #8
 80085ee:	e7ca      	b.n	8008586 <__kernel_rem_pio2+0x6e>
 80085f0:	9b00      	ldr	r3, [sp, #0]
 80085f2:	aa0c      	add	r2, sp, #48	; 0x30
 80085f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80085fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008600:	9c00      	ldr	r4, [sp, #0]
 8008602:	930a      	str	r3, [sp, #40]	; 0x28
 8008604:	00e3      	lsls	r3, r4, #3
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	ab98      	add	r3, sp, #608	; 0x260
 800860a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800860e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008612:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008616:	ab70      	add	r3, sp, #448	; 0x1c0
 8008618:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800861c:	46c3      	mov	fp, r8
 800861e:	46a1      	mov	r9, r4
 8008620:	f1b9 0f00 	cmp.w	r9, #0
 8008624:	f1a5 0508 	sub.w	r5, r5, #8
 8008628:	dc77      	bgt.n	800871a <__kernel_rem_pio2+0x202>
 800862a:	ec47 6b10 	vmov	d0, r6, r7
 800862e:	4650      	mov	r0, sl
 8008630:	f000 fac2 	bl	8008bb8 <scalbn>
 8008634:	ec57 6b10 	vmov	r6, r7, d0
 8008638:	2200      	movs	r2, #0
 800863a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800863e:	ee10 0a10 	vmov	r0, s0
 8008642:	4639      	mov	r1, r7
 8008644:	f7f7 ff7c 	bl	8000540 <__aeabi_dmul>
 8008648:	ec41 0b10 	vmov	d0, r0, r1
 800864c:	f000 fb34 	bl	8008cb8 <floor>
 8008650:	4b7a      	ldr	r3, [pc, #488]	; (800883c <__kernel_rem_pio2+0x324>)
 8008652:	ec51 0b10 	vmov	r0, r1, d0
 8008656:	2200      	movs	r2, #0
 8008658:	f7f7 ff72 	bl	8000540 <__aeabi_dmul>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4630      	mov	r0, r6
 8008662:	4639      	mov	r1, r7
 8008664:	f7f7 fdb4 	bl	80001d0 <__aeabi_dsub>
 8008668:	460f      	mov	r7, r1
 800866a:	4606      	mov	r6, r0
 800866c:	f7f8 fa02 	bl	8000a74 <__aeabi_d2iz>
 8008670:	9002      	str	r0, [sp, #8]
 8008672:	f7f7 fefb 	bl	800046c <__aeabi_i2d>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4630      	mov	r0, r6
 800867c:	4639      	mov	r1, r7
 800867e:	f7f7 fda7 	bl	80001d0 <__aeabi_dsub>
 8008682:	f1ba 0f00 	cmp.w	sl, #0
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	dd6d      	ble.n	8008768 <__kernel_rem_pio2+0x250>
 800868c:	1e61      	subs	r1, r4, #1
 800868e:	ab0c      	add	r3, sp, #48	; 0x30
 8008690:	9d02      	ldr	r5, [sp, #8]
 8008692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008696:	f1ca 0018 	rsb	r0, sl, #24
 800869a:	fa43 f200 	asr.w	r2, r3, r0
 800869e:	4415      	add	r5, r2
 80086a0:	4082      	lsls	r2, r0
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	aa0c      	add	r2, sp, #48	; 0x30
 80086a6:	9502      	str	r5, [sp, #8]
 80086a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80086ac:	f1ca 0217 	rsb	r2, sl, #23
 80086b0:	fa43 fb02 	asr.w	fp, r3, r2
 80086b4:	f1bb 0f00 	cmp.w	fp, #0
 80086b8:	dd65      	ble.n	8008786 <__kernel_rem_pio2+0x26e>
 80086ba:	9b02      	ldr	r3, [sp, #8]
 80086bc:	2200      	movs	r2, #0
 80086be:	3301      	adds	r3, #1
 80086c0:	9302      	str	r3, [sp, #8]
 80086c2:	4615      	mov	r5, r2
 80086c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80086c8:	4294      	cmp	r4, r2
 80086ca:	f300 809f 	bgt.w	800880c <__kernel_rem_pio2+0x2f4>
 80086ce:	f1ba 0f00 	cmp.w	sl, #0
 80086d2:	dd07      	ble.n	80086e4 <__kernel_rem_pio2+0x1cc>
 80086d4:	f1ba 0f01 	cmp.w	sl, #1
 80086d8:	f000 80c1 	beq.w	800885e <__kernel_rem_pio2+0x346>
 80086dc:	f1ba 0f02 	cmp.w	sl, #2
 80086e0:	f000 80c7 	beq.w	8008872 <__kernel_rem_pio2+0x35a>
 80086e4:	f1bb 0f02 	cmp.w	fp, #2
 80086e8:	d14d      	bne.n	8008786 <__kernel_rem_pio2+0x26e>
 80086ea:	4632      	mov	r2, r6
 80086ec:	463b      	mov	r3, r7
 80086ee:	4954      	ldr	r1, [pc, #336]	; (8008840 <__kernel_rem_pio2+0x328>)
 80086f0:	2000      	movs	r0, #0
 80086f2:	f7f7 fd6d 	bl	80001d0 <__aeabi_dsub>
 80086f6:	4606      	mov	r6, r0
 80086f8:	460f      	mov	r7, r1
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	d043      	beq.n	8008786 <__kernel_rem_pio2+0x26e>
 80086fe:	4650      	mov	r0, sl
 8008700:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008830 <__kernel_rem_pio2+0x318>
 8008704:	f000 fa58 	bl	8008bb8 <scalbn>
 8008708:	4630      	mov	r0, r6
 800870a:	4639      	mov	r1, r7
 800870c:	ec53 2b10 	vmov	r2, r3, d0
 8008710:	f7f7 fd5e 	bl	80001d0 <__aeabi_dsub>
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	e035      	b.n	8008786 <__kernel_rem_pio2+0x26e>
 800871a:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <__kernel_rem_pio2+0x32c>)
 800871c:	2200      	movs	r2, #0
 800871e:	4630      	mov	r0, r6
 8008720:	4639      	mov	r1, r7
 8008722:	f7f7 ff0d 	bl	8000540 <__aeabi_dmul>
 8008726:	f7f8 f9a5 	bl	8000a74 <__aeabi_d2iz>
 800872a:	f7f7 fe9f 	bl	800046c <__aeabi_i2d>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	ec43 2b18 	vmov	d8, r2, r3
 8008736:	4b44      	ldr	r3, [pc, #272]	; (8008848 <__kernel_rem_pio2+0x330>)
 8008738:	2200      	movs	r2, #0
 800873a:	f7f7 ff01 	bl	8000540 <__aeabi_dmul>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f7 fd43 	bl	80001d0 <__aeabi_dsub>
 800874a:	f7f8 f993 	bl	8000a74 <__aeabi_d2iz>
 800874e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008752:	f84b 0b04 	str.w	r0, [fp], #4
 8008756:	ec51 0b18 	vmov	r0, r1, d8
 800875a:	f7f7 fd3b 	bl	80001d4 <__adddf3>
 800875e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008762:	4606      	mov	r6, r0
 8008764:	460f      	mov	r7, r1
 8008766:	e75b      	b.n	8008620 <__kernel_rem_pio2+0x108>
 8008768:	d106      	bne.n	8008778 <__kernel_rem_pio2+0x260>
 800876a:	1e63      	subs	r3, r4, #1
 800876c:	aa0c      	add	r2, sp, #48	; 0x30
 800876e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008772:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008776:	e79d      	b.n	80086b4 <__kernel_rem_pio2+0x19c>
 8008778:	4b34      	ldr	r3, [pc, #208]	; (800884c <__kernel_rem_pio2+0x334>)
 800877a:	2200      	movs	r2, #0
 800877c:	f7f8 f966 	bl	8000a4c <__aeabi_dcmpge>
 8008780:	2800      	cmp	r0, #0
 8008782:	d140      	bne.n	8008806 <__kernel_rem_pio2+0x2ee>
 8008784:	4683      	mov	fp, r0
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	f7f8 f93f 	bl	8000a10 <__aeabi_dcmpeq>
 8008792:	2800      	cmp	r0, #0
 8008794:	f000 80c1 	beq.w	800891a <__kernel_rem_pio2+0x402>
 8008798:	1e65      	subs	r5, r4, #1
 800879a:	462b      	mov	r3, r5
 800879c:	2200      	movs	r2, #0
 800879e:	9900      	ldr	r1, [sp, #0]
 80087a0:	428b      	cmp	r3, r1
 80087a2:	da6d      	bge.n	8008880 <__kernel_rem_pio2+0x368>
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	f000 808a 	beq.w	80088be <__kernel_rem_pio2+0x3a6>
 80087aa:	ab0c      	add	r3, sp, #48	; 0x30
 80087ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80087b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80ae 	beq.w	8008916 <__kernel_rem_pio2+0x3fe>
 80087ba:	4650      	mov	r0, sl
 80087bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008830 <__kernel_rem_pio2+0x318>
 80087c0:	f000 f9fa 	bl	8008bb8 <scalbn>
 80087c4:	1c6b      	adds	r3, r5, #1
 80087c6:	00da      	lsls	r2, r3, #3
 80087c8:	9205      	str	r2, [sp, #20]
 80087ca:	ec57 6b10 	vmov	r6, r7, d0
 80087ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80087d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008844 <__kernel_rem_pio2+0x32c>
 80087d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80087d8:	462c      	mov	r4, r5
 80087da:	f04f 0800 	mov.w	r8, #0
 80087de:	2c00      	cmp	r4, #0
 80087e0:	f280 80d4 	bge.w	800898c <__kernel_rem_pio2+0x474>
 80087e4:	462c      	mov	r4, r5
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	f2c0 8102 	blt.w	80089f0 <__kernel_rem_pio2+0x4d8>
 80087ec:	4b18      	ldr	r3, [pc, #96]	; (8008850 <__kernel_rem_pio2+0x338>)
 80087ee:	461e      	mov	r6, r3
 80087f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80087f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80087f6:	1b2b      	subs	r3, r5, r4
 80087f8:	f04f 0900 	mov.w	r9, #0
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	2700      	movs	r7, #0
 8008802:	9306      	str	r3, [sp, #24]
 8008804:	e0e6      	b.n	80089d4 <__kernel_rem_pio2+0x4bc>
 8008806:	f04f 0b02 	mov.w	fp, #2
 800880a:	e756      	b.n	80086ba <__kernel_rem_pio2+0x1a2>
 800880c:	f8d8 3000 	ldr.w	r3, [r8]
 8008810:	bb05      	cbnz	r5, 8008854 <__kernel_rem_pio2+0x33c>
 8008812:	b123      	cbz	r3, 800881e <__kernel_rem_pio2+0x306>
 8008814:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008818:	f8c8 3000 	str.w	r3, [r8]
 800881c:	2301      	movs	r3, #1
 800881e:	3201      	adds	r2, #1
 8008820:	f108 0804 	add.w	r8, r8, #4
 8008824:	461d      	mov	r5, r3
 8008826:	e74f      	b.n	80086c8 <__kernel_rem_pio2+0x1b0>
	...
 8008834:	3ff00000 	.word	0x3ff00000
 8008838:	08008fe0 	.word	0x08008fe0
 800883c:	40200000 	.word	0x40200000
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	3e700000 	.word	0x3e700000
 8008848:	41700000 	.word	0x41700000
 800884c:	3fe00000 	.word	0x3fe00000
 8008850:	08008fa0 	.word	0x08008fa0
 8008854:	1acb      	subs	r3, r1, r3
 8008856:	f8c8 3000 	str.w	r3, [r8]
 800885a:	462b      	mov	r3, r5
 800885c:	e7df      	b.n	800881e <__kernel_rem_pio2+0x306>
 800885e:	1e62      	subs	r2, r4, #1
 8008860:	ab0c      	add	r3, sp, #48	; 0x30
 8008862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008866:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800886a:	a90c      	add	r1, sp, #48	; 0x30
 800886c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008870:	e738      	b.n	80086e4 <__kernel_rem_pio2+0x1cc>
 8008872:	1e62      	subs	r2, r4, #1
 8008874:	ab0c      	add	r3, sp, #48	; 0x30
 8008876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800887e:	e7f4      	b.n	800886a <__kernel_rem_pio2+0x352>
 8008880:	a90c      	add	r1, sp, #48	; 0x30
 8008882:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008886:	3b01      	subs	r3, #1
 8008888:	430a      	orrs	r2, r1
 800888a:	e788      	b.n	800879e <__kernel_rem_pio2+0x286>
 800888c:	3301      	adds	r3, #1
 800888e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008892:	2900      	cmp	r1, #0
 8008894:	d0fa      	beq.n	800888c <__kernel_rem_pio2+0x374>
 8008896:	9a08      	ldr	r2, [sp, #32]
 8008898:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800889c:	446a      	add	r2, sp
 800889e:	3a98      	subs	r2, #152	; 0x98
 80088a0:	9208      	str	r2, [sp, #32]
 80088a2:	9a06      	ldr	r2, [sp, #24]
 80088a4:	a920      	add	r1, sp, #128	; 0x80
 80088a6:	18a2      	adds	r2, r4, r2
 80088a8:	18e3      	adds	r3, r4, r3
 80088aa:	f104 0801 	add.w	r8, r4, #1
 80088ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80088b2:	9302      	str	r3, [sp, #8]
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	4543      	cmp	r3, r8
 80088b8:	da04      	bge.n	80088c4 <__kernel_rem_pio2+0x3ac>
 80088ba:	461c      	mov	r4, r3
 80088bc:	e6a2      	b.n	8008604 <__kernel_rem_pio2+0xec>
 80088be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7e4      	b.n	800888e <__kernel_rem_pio2+0x376>
 80088c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80088ca:	f7f7 fdcf 	bl	800046c <__aeabi_i2d>
 80088ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	46ab      	mov	fp, r5
 80088d6:	461c      	mov	r4, r3
 80088d8:	f04f 0900 	mov.w	r9, #0
 80088dc:	2600      	movs	r6, #0
 80088de:	2700      	movs	r7, #0
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	4599      	cmp	r9, r3
 80088e4:	dd06      	ble.n	80088f4 <__kernel_rem_pio2+0x3dc>
 80088e6:	9b08      	ldr	r3, [sp, #32]
 80088e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80088ec:	f108 0801 	add.w	r8, r8, #1
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	e7df      	b.n	80088b4 <__kernel_rem_pio2+0x39c>
 80088f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80088f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80088fc:	f7f7 fe20 	bl	8000540 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f7 fc64 	bl	80001d4 <__adddf3>
 800890c:	f109 0901 	add.w	r9, r9, #1
 8008910:	4606      	mov	r6, r0
 8008912:	460f      	mov	r7, r1
 8008914:	e7e4      	b.n	80088e0 <__kernel_rem_pio2+0x3c8>
 8008916:	3d01      	subs	r5, #1
 8008918:	e747      	b.n	80087aa <__kernel_rem_pio2+0x292>
 800891a:	ec47 6b10 	vmov	d0, r6, r7
 800891e:	f1ca 0000 	rsb	r0, sl, #0
 8008922:	f000 f949 	bl	8008bb8 <scalbn>
 8008926:	ec57 6b10 	vmov	r6, r7, d0
 800892a:	4ba0      	ldr	r3, [pc, #640]	; (8008bac <__kernel_rem_pio2+0x694>)
 800892c:	ee10 0a10 	vmov	r0, s0
 8008930:	2200      	movs	r2, #0
 8008932:	4639      	mov	r1, r7
 8008934:	f7f8 f88a 	bl	8000a4c <__aeabi_dcmpge>
 8008938:	b1f8      	cbz	r0, 800897a <__kernel_rem_pio2+0x462>
 800893a:	4b9d      	ldr	r3, [pc, #628]	; (8008bb0 <__kernel_rem_pio2+0x698>)
 800893c:	2200      	movs	r2, #0
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 fdfd 	bl	8000540 <__aeabi_dmul>
 8008946:	f7f8 f895 	bl	8000a74 <__aeabi_d2iz>
 800894a:	4680      	mov	r8, r0
 800894c:	f7f7 fd8e 	bl	800046c <__aeabi_i2d>
 8008950:	4b96      	ldr	r3, [pc, #600]	; (8008bac <__kernel_rem_pio2+0x694>)
 8008952:	2200      	movs	r2, #0
 8008954:	f7f7 fdf4 	bl	8000540 <__aeabi_dmul>
 8008958:	460b      	mov	r3, r1
 800895a:	4602      	mov	r2, r0
 800895c:	4639      	mov	r1, r7
 800895e:	4630      	mov	r0, r6
 8008960:	f7f7 fc36 	bl	80001d0 <__aeabi_dsub>
 8008964:	f7f8 f886 	bl	8000a74 <__aeabi_d2iz>
 8008968:	1c65      	adds	r5, r4, #1
 800896a:	ab0c      	add	r3, sp, #48	; 0x30
 800896c:	f10a 0a18 	add.w	sl, sl, #24
 8008970:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008974:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008978:	e71f      	b.n	80087ba <__kernel_rem_pio2+0x2a2>
 800897a:	4630      	mov	r0, r6
 800897c:	4639      	mov	r1, r7
 800897e:	f7f8 f879 	bl	8000a74 <__aeabi_d2iz>
 8008982:	ab0c      	add	r3, sp, #48	; 0x30
 8008984:	4625      	mov	r5, r4
 8008986:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800898a:	e716      	b.n	80087ba <__kernel_rem_pio2+0x2a2>
 800898c:	ab0c      	add	r3, sp, #48	; 0x30
 800898e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008992:	f7f7 fd6b 	bl	800046c <__aeabi_i2d>
 8008996:	4632      	mov	r2, r6
 8008998:	463b      	mov	r3, r7
 800899a:	f7f7 fdd1 	bl	8000540 <__aeabi_dmul>
 800899e:	4642      	mov	r2, r8
 80089a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80089a4:	464b      	mov	r3, r9
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	f7f7 fdc9 	bl	8000540 <__aeabi_dmul>
 80089ae:	3c01      	subs	r4, #1
 80089b0:	4606      	mov	r6, r0
 80089b2:	460f      	mov	r7, r1
 80089b4:	e713      	b.n	80087de <__kernel_rem_pio2+0x2c6>
 80089b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80089ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80089be:	f7f7 fdbf 	bl	8000540 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4648      	mov	r0, r9
 80089c8:	4651      	mov	r1, sl
 80089ca:	f7f7 fc03 	bl	80001d4 <__adddf3>
 80089ce:	3701      	adds	r7, #1
 80089d0:	4681      	mov	r9, r0
 80089d2:	468a      	mov	sl, r1
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	429f      	cmp	r7, r3
 80089d8:	dc02      	bgt.n	80089e0 <__kernel_rem_pio2+0x4c8>
 80089da:	9b06      	ldr	r3, [sp, #24]
 80089dc:	429f      	cmp	r7, r3
 80089de:	ddea      	ble.n	80089b6 <__kernel_rem_pio2+0x49e>
 80089e0:	9a06      	ldr	r2, [sp, #24]
 80089e2:	ab48      	add	r3, sp, #288	; 0x120
 80089e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80089e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80089ec:	3c01      	subs	r4, #1
 80089ee:	e6fa      	b.n	80087e6 <__kernel_rem_pio2+0x2ce>
 80089f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	dc0b      	bgt.n	8008a0e <__kernel_rem_pio2+0x4f6>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dc39      	bgt.n	8008a6e <__kernel_rem_pio2+0x556>
 80089fa:	d05d      	beq.n	8008ab8 <__kernel_rem_pio2+0x5a0>
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	f003 0007 	and.w	r0, r3, #7
 8008a02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008a06:	ecbd 8b02 	vpop	{d8}
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d1f3      	bne.n	80089fc <__kernel_rem_pio2+0x4e4>
 8008a14:	9b05      	ldr	r3, [sp, #20]
 8008a16:	9500      	str	r5, [sp, #0]
 8008a18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008a1c:	eb0d 0403 	add.w	r4, sp, r3
 8008a20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008a24:	46a2      	mov	sl, r4
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f1aa 0a08 	sub.w	sl, sl, #8
 8008a2e:	dc69      	bgt.n	8008b04 <__kernel_rem_pio2+0x5ec>
 8008a30:	46aa      	mov	sl, r5
 8008a32:	f1ba 0f01 	cmp.w	sl, #1
 8008a36:	f1a4 0408 	sub.w	r4, r4, #8
 8008a3a:	f300 8083 	bgt.w	8008b44 <__kernel_rem_pio2+0x62c>
 8008a3e:	9c05      	ldr	r4, [sp, #20]
 8008a40:	ab48      	add	r3, sp, #288	; 0x120
 8008a42:	441c      	add	r4, r3
 8008a44:	2000      	movs	r0, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	2d01      	cmp	r5, #1
 8008a4a:	f300 809a 	bgt.w	8008b82 <__kernel_rem_pio2+0x66a>
 8008a4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008a52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008a56:	f1bb 0f00 	cmp.w	fp, #0
 8008a5a:	f040 8098 	bne.w	8008b8e <__kernel_rem_pio2+0x676>
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	e9c3 7800 	strd	r7, r8, [r3]
 8008a64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008a68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008a6c:	e7c6      	b.n	80089fc <__kernel_rem_pio2+0x4e4>
 8008a6e:	9e05      	ldr	r6, [sp, #20]
 8008a70:	ab48      	add	r3, sp, #288	; 0x120
 8008a72:	441e      	add	r6, r3
 8008a74:	462c      	mov	r4, r5
 8008a76:	2000      	movs	r0, #0
 8008a78:	2100      	movs	r1, #0
 8008a7a:	2c00      	cmp	r4, #0
 8008a7c:	da33      	bge.n	8008ae6 <__kernel_rem_pio2+0x5ce>
 8008a7e:	f1bb 0f00 	cmp.w	fp, #0
 8008a82:	d036      	beq.n	8008af2 <__kernel_rem_pio2+0x5da>
 8008a84:	4602      	mov	r2, r0
 8008a86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a8a:	9c04      	ldr	r4, [sp, #16]
 8008a8c:	e9c4 2300 	strd	r2, r3, [r4]
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008a98:	f7f7 fb9a 	bl	80001d0 <__aeabi_dsub>
 8008a9c:	ae4a      	add	r6, sp, #296	; 0x128
 8008a9e:	2401      	movs	r4, #1
 8008aa0:	42a5      	cmp	r5, r4
 8008aa2:	da29      	bge.n	8008af8 <__kernel_rem_pio2+0x5e0>
 8008aa4:	f1bb 0f00 	cmp.w	fp, #0
 8008aa8:	d002      	beq.n	8008ab0 <__kernel_rem_pio2+0x598>
 8008aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aae:	4619      	mov	r1, r3
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008ab6:	e7a1      	b.n	80089fc <__kernel_rem_pio2+0x4e4>
 8008ab8:	9c05      	ldr	r4, [sp, #20]
 8008aba:	ab48      	add	r3, sp, #288	; 0x120
 8008abc:	441c      	add	r4, r3
 8008abe:	2000      	movs	r0, #0
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	2d00      	cmp	r5, #0
 8008ac4:	da09      	bge.n	8008ada <__kernel_rem_pio2+0x5c2>
 8008ac6:	f1bb 0f00 	cmp.w	fp, #0
 8008aca:	d002      	beq.n	8008ad2 <__kernel_rem_pio2+0x5ba>
 8008acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	e9c3 0100 	strd	r0, r1, [r3]
 8008ad8:	e790      	b.n	80089fc <__kernel_rem_pio2+0x4e4>
 8008ada:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ade:	f7f7 fb79 	bl	80001d4 <__adddf3>
 8008ae2:	3d01      	subs	r5, #1
 8008ae4:	e7ed      	b.n	8008ac2 <__kernel_rem_pio2+0x5aa>
 8008ae6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008aea:	f7f7 fb73 	bl	80001d4 <__adddf3>
 8008aee:	3c01      	subs	r4, #1
 8008af0:	e7c3      	b.n	8008a7a <__kernel_rem_pio2+0x562>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	e7c8      	b.n	8008a8a <__kernel_rem_pio2+0x572>
 8008af8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008afc:	f7f7 fb6a 	bl	80001d4 <__adddf3>
 8008b00:	3401      	adds	r4, #1
 8008b02:	e7cd      	b.n	8008aa0 <__kernel_rem_pio2+0x588>
 8008b04:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008b0c:	9b00      	ldr	r3, [sp, #0]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	4632      	mov	r2, r6
 8008b14:	463b      	mov	r3, r7
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f7 fb5b 	bl	80001d4 <__adddf3>
 8008b1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4640      	mov	r0, r8
 8008b28:	4649      	mov	r1, r9
 8008b2a:	f7f7 fb51 	bl	80001d0 <__aeabi_dsub>
 8008b2e:	4632      	mov	r2, r6
 8008b30:	463b      	mov	r3, r7
 8008b32:	f7f7 fb4f 	bl	80001d4 <__adddf3>
 8008b36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008b3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b3e:	ed8a 7b00 	vstr	d7, [sl]
 8008b42:	e770      	b.n	8008a26 <__kernel_rem_pio2+0x50e>
 8008b44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008b48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	4632      	mov	r2, r6
 8008b50:	463b      	mov	r3, r7
 8008b52:	4649      	mov	r1, r9
 8008b54:	f7f7 fb3e 	bl	80001d4 <__adddf3>
 8008b58:	e9cd 0100 	strd	r0, r1, [sp]
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4640      	mov	r0, r8
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f7 fb34 	bl	80001d0 <__aeabi_dsub>
 8008b68:	4632      	mov	r2, r6
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	f7f7 fb32 	bl	80001d4 <__adddf3>
 8008b70:	ed9d 7b00 	vldr	d7, [sp]
 8008b74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b78:	ed84 7b00 	vstr	d7, [r4]
 8008b7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b80:	e757      	b.n	8008a32 <__kernel_rem_pio2+0x51a>
 8008b82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b86:	f7f7 fb25 	bl	80001d4 <__adddf3>
 8008b8a:	3d01      	subs	r5, #1
 8008b8c:	e75c      	b.n	8008a48 <__kernel_rem_pio2+0x530>
 8008b8e:	9b04      	ldr	r3, [sp, #16]
 8008b90:	9a04      	ldr	r2, [sp, #16]
 8008b92:	601f      	str	r7, [r3, #0]
 8008b94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008b98:	605c      	str	r4, [r3, #4]
 8008b9a:	609d      	str	r5, [r3, #8]
 8008b9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ba0:	60d3      	str	r3, [r2, #12]
 8008ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ba6:	6110      	str	r0, [r2, #16]
 8008ba8:	6153      	str	r3, [r2, #20]
 8008baa:	e727      	b.n	80089fc <__kernel_rem_pio2+0x4e4>
 8008bac:	41700000 	.word	0x41700000
 8008bb0:	3e700000 	.word	0x3e700000
 8008bb4:	00000000 	.word	0x00000000

08008bb8 <scalbn>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	ec55 4b10 	vmov	r4, r5, d0
 8008bbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	b999      	cbnz	r1, 8008bf0 <scalbn+0x38>
 8008bc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008bcc:	4323      	orrs	r3, r4
 8008bce:	d03f      	beq.n	8008c50 <scalbn+0x98>
 8008bd0:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <scalbn+0xf0>)
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	ee10 0a10 	vmov	r0, s0
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f7f7 fcb1 	bl	8000540 <__aeabi_dmul>
 8008bde:	4b33      	ldr	r3, [pc, #204]	; (8008cac <scalbn+0xf4>)
 8008be0:	429e      	cmp	r6, r3
 8008be2:	4604      	mov	r4, r0
 8008be4:	460d      	mov	r5, r1
 8008be6:	da10      	bge.n	8008c0a <scalbn+0x52>
 8008be8:	a327      	add	r3, pc, #156	; (adr r3, 8008c88 <scalbn+0xd0>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	e01f      	b.n	8008c30 <scalbn+0x78>
 8008bf0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008bf4:	4291      	cmp	r1, r2
 8008bf6:	d10c      	bne.n	8008c12 <scalbn+0x5a>
 8008bf8:	ee10 2a10 	vmov	r2, s0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fae8 	bl	80001d4 <__adddf3>
 8008c04:	4604      	mov	r4, r0
 8008c06:	460d      	mov	r5, r1
 8008c08:	e022      	b.n	8008c50 <scalbn+0x98>
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008c10:	3936      	subs	r1, #54	; 0x36
 8008c12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008c16:	4296      	cmp	r6, r2
 8008c18:	dd0d      	ble.n	8008c36 <scalbn+0x7e>
 8008c1a:	2d00      	cmp	r5, #0
 8008c1c:	a11c      	add	r1, pc, #112	; (adr r1, 8008c90 <scalbn+0xd8>)
 8008c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c22:	da02      	bge.n	8008c2a <scalbn+0x72>
 8008c24:	a11c      	add	r1, pc, #112	; (adr r1, 8008c98 <scalbn+0xe0>)
 8008c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2a:	a319      	add	r3, pc, #100	; (adr r3, 8008c90 <scalbn+0xd8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fc86 	bl	8000540 <__aeabi_dmul>
 8008c34:	e7e6      	b.n	8008c04 <scalbn+0x4c>
 8008c36:	1872      	adds	r2, r6, r1
 8008c38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c3c:	428a      	cmp	r2, r1
 8008c3e:	dcec      	bgt.n	8008c1a <scalbn+0x62>
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	dd08      	ble.n	8008c56 <scalbn+0x9e>
 8008c44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c50:	ec45 4b10 	vmov	d0, r4, r5
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008c5a:	da08      	bge.n	8008c6e <scalbn+0xb6>
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	a10a      	add	r1, pc, #40	; (adr r1, 8008c88 <scalbn+0xd0>)
 8008c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c64:	dac0      	bge.n	8008be8 <scalbn+0x30>
 8008c66:	a10e      	add	r1, pc, #56	; (adr r1, 8008ca0 <scalbn+0xe8>)
 8008c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c6c:	e7bc      	b.n	8008be8 <scalbn+0x30>
 8008c6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c72:	3236      	adds	r2, #54	; 0x36
 8008c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <scalbn+0xf8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	e7d5      	b.n	8008c30 <scalbn+0x78>
 8008c84:	f3af 8000 	nop.w
 8008c88:	c2f8f359 	.word	0xc2f8f359
 8008c8c:	01a56e1f 	.word	0x01a56e1f
 8008c90:	8800759c 	.word	0x8800759c
 8008c94:	7e37e43c 	.word	0x7e37e43c
 8008c98:	8800759c 	.word	0x8800759c
 8008c9c:	fe37e43c 	.word	0xfe37e43c
 8008ca0:	c2f8f359 	.word	0xc2f8f359
 8008ca4:	81a56e1f 	.word	0x81a56e1f
 8008ca8:	43500000 	.word	0x43500000
 8008cac:	ffff3cb0 	.word	0xffff3cb0
 8008cb0:	3c900000 	.word	0x3c900000
 8008cb4:	00000000 	.word	0x00000000

08008cb8 <floor>:
 8008cb8:	ec51 0b10 	vmov	r0, r1, d0
 8008cbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008cc8:	2e13      	cmp	r6, #19
 8008cca:	ee10 5a10 	vmov	r5, s0
 8008cce:	ee10 8a10 	vmov	r8, s0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	dc31      	bgt.n	8008d3a <floor+0x82>
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	da14      	bge.n	8008d04 <floor+0x4c>
 8008cda:	a333      	add	r3, pc, #204	; (adr r3, 8008da8 <floor+0xf0>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fa78 	bl	80001d4 <__adddf3>
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f7f7 feba 	bl	8000a60 <__aeabi_dcmpgt>
 8008cec:	b138      	cbz	r0, 8008cfe <floor+0x46>
 8008cee:	2c00      	cmp	r4, #0
 8008cf0:	da53      	bge.n	8008d9a <floor+0xe2>
 8008cf2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008cf6:	4325      	orrs	r5, r4
 8008cf8:	d052      	beq.n	8008da0 <floor+0xe8>
 8008cfa:	4c2d      	ldr	r4, [pc, #180]	; (8008db0 <floor+0xf8>)
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4628      	mov	r0, r5
 8008d02:	e024      	b.n	8008d4e <floor+0x96>
 8008d04:	4f2b      	ldr	r7, [pc, #172]	; (8008db4 <floor+0xfc>)
 8008d06:	4137      	asrs	r7, r6
 8008d08:	ea01 0307 	and.w	r3, r1, r7
 8008d0c:	4303      	orrs	r3, r0
 8008d0e:	d01e      	beq.n	8008d4e <floor+0x96>
 8008d10:	a325      	add	r3, pc, #148	; (adr r3, 8008da8 <floor+0xf0>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fa5d 	bl	80001d4 <__adddf3>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f7f7 fe9f 	bl	8000a60 <__aeabi_dcmpgt>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d0eb      	beq.n	8008cfe <floor+0x46>
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	bfbe      	ittt	lt
 8008d2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d2e:	4133      	asrlt	r3, r6
 8008d30:	18e4      	addlt	r4, r4, r3
 8008d32:	ea24 0407 	bic.w	r4, r4, r7
 8008d36:	2500      	movs	r5, #0
 8008d38:	e7e1      	b.n	8008cfe <floor+0x46>
 8008d3a:	2e33      	cmp	r6, #51	; 0x33
 8008d3c:	dd0b      	ble.n	8008d56 <floor+0x9e>
 8008d3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d42:	d104      	bne.n	8008d4e <floor+0x96>
 8008d44:	ee10 2a10 	vmov	r2, s0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	f7f7 fa43 	bl	80001d4 <__adddf3>
 8008d4e:	ec41 0b10 	vmov	d0, r0, r1
 8008d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d5e:	40df      	lsrs	r7, r3
 8008d60:	4238      	tst	r0, r7
 8008d62:	d0f4      	beq.n	8008d4e <floor+0x96>
 8008d64:	a310      	add	r3, pc, #64	; (adr r3, 8008da8 <floor+0xf0>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f7f7 fa33 	bl	80001d4 <__adddf3>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2300      	movs	r3, #0
 8008d72:	f7f7 fe75 	bl	8000a60 <__aeabi_dcmpgt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0c1      	beq.n	8008cfe <floor+0x46>
 8008d7a:	2c00      	cmp	r4, #0
 8008d7c:	da0a      	bge.n	8008d94 <floor+0xdc>
 8008d7e:	2e14      	cmp	r6, #20
 8008d80:	d101      	bne.n	8008d86 <floor+0xce>
 8008d82:	3401      	adds	r4, #1
 8008d84:	e006      	b.n	8008d94 <floor+0xdc>
 8008d86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	40b3      	lsls	r3, r6
 8008d8e:	441d      	add	r5, r3
 8008d90:	45a8      	cmp	r8, r5
 8008d92:	d8f6      	bhi.n	8008d82 <floor+0xca>
 8008d94:	ea25 0507 	bic.w	r5, r5, r7
 8008d98:	e7b1      	b.n	8008cfe <floor+0x46>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	462c      	mov	r4, r5
 8008d9e:	e7ae      	b.n	8008cfe <floor+0x46>
 8008da0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008da4:	e7ab      	b.n	8008cfe <floor+0x46>
 8008da6:	bf00      	nop
 8008da8:	8800759c 	.word	0x8800759c
 8008dac:	7e37e43c 	.word	0x7e37e43c
 8008db0:	bff00000 	.word	0xbff00000
 8008db4:	000fffff 	.word	0x000fffff

08008db8 <_init>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr

08008dc4 <_fini>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr
